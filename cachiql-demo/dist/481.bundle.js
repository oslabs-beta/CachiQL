"use strict";(self.webpackChunkcachiql_demo=self.webpackChunkcachiql_demo||[]).push([[481],{17481:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "l": () => (/* binding */ lint$1)\n/* harmony export */ });\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97480);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== "string" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== "default" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, "_mergeNamespaces");\nvar lint$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports);\n  })(function(CodeMirror) {\n    var GUTTER_ID = "CodeMirror-lint-markers";\n    var LINT_LINE_ID = "CodeMirror-lint-line-";\n    function showTooltip(cm, e, content) {\n      var tt = document.createElement("div");\n      tt.className = "CodeMirror-lint-tooltip cm-s-" + cm.options.theme;\n      tt.appendChild(content.cloneNode(true));\n      if (cm.state.lint.options.selfContain)\n        cm.getWrapperElement().appendChild(tt);\n      else\n        document.body.appendChild(tt);\n      function position(e2) {\n        if (!tt.parentNode)\n          return CodeMirror.off(document, "mousemove", position);\n        tt.style.top = Math.max(0, e2.clientY - tt.offsetHeight - 5) + "px";\n        tt.style.left = e2.clientX + 5 + "px";\n      }\n      __name(position, "position");\n      CodeMirror.on(document, "mousemove", position);\n      position(e);\n      if (tt.style.opacity != null)\n        tt.style.opacity = 1;\n      return tt;\n    }\n    __name(showTooltip, "showTooltip");\n    function rm(elt) {\n      if (elt.parentNode)\n        elt.parentNode.removeChild(elt);\n    }\n    __name(rm, "rm");\n    function hideTooltip(tt) {\n      if (!tt.parentNode)\n        return;\n      if (tt.style.opacity == null)\n        rm(tt);\n      tt.style.opacity = 0;\n      setTimeout(function() {\n        rm(tt);\n      }, 600);\n    }\n    __name(hideTooltip, "hideTooltip");\n    function showTooltipFor(cm, e, content, node) {\n      var tooltip = showTooltip(cm, e, content);\n      function hide() {\n        CodeMirror.off(node, "mouseout", hide);\n        if (tooltip) {\n          hideTooltip(tooltip);\n          tooltip = null;\n        }\n      }\n      __name(hide, "hide");\n      var poll = setInterval(function() {\n        if (tooltip)\n          for (var n = node; ; n = n.parentNode) {\n            if (n && n.nodeType == 11)\n              n = n.host;\n            if (n == document.body)\n              return;\n            if (!n) {\n              hide();\n              break;\n            }\n          }\n        if (!tooltip)\n          return clearInterval(poll);\n      }, 400);\n      CodeMirror.on(node, "mouseout", hide);\n    }\n    __name(showTooltipFor, "showTooltipFor");\n    function LintState(cm, conf, hasGutter) {\n      this.marked = [];\n      if (conf instanceof Function)\n        conf = { getAnnotations: conf };\n      if (!conf || conf === true)\n        conf = {};\n      this.options = {};\n      this.linterOptions = conf.options || {};\n      for (var prop in defaults)\n        this.options[prop] = defaults[prop];\n      for (var prop in conf) {\n        if (defaults.hasOwnProperty(prop)) {\n          if (conf[prop] != null)\n            this.options[prop] = conf[prop];\n        } else if (!conf.options) {\n          this.linterOptions[prop] = conf[prop];\n        }\n      }\n      this.timeout = null;\n      this.hasGutter = hasGutter;\n      this.onMouseOver = function(e) {\n        onMouseOver(cm, e);\n      };\n      this.waitingFor = 0;\n    }\n    __name(LintState, "LintState");\n    var defaults = {\n      highlightLines: false,\n      tooltips: true,\n      delay: 500,\n      lintOnChange: true,\n      getAnnotations: null,\n      async: false,\n      selfContain: null,\n      formatAnnotation: null,\n      onUpdateLinting: null\n    };\n    function clearMarks(cm) {\n      var state = cm.state.lint;\n      if (state.hasGutter)\n        cm.clearGutter(GUTTER_ID);\n      if (state.options.highlightLines)\n        clearErrorLines(cm);\n      for (var i = 0; i < state.marked.length; ++i)\n        state.marked[i].clear();\n      state.marked.length = 0;\n    }\n    __name(clearMarks, "clearMarks");\n    function clearErrorLines(cm) {\n      cm.eachLine(function(line) {\n        var has = line.wrapClass && /\\bCodeMirror-lint-line-\\w+\\b/.exec(line.wrapClass);\n        if (has)\n          cm.removeLineClass(line, "wrap", has[0]);\n      });\n    }\n    __name(clearErrorLines, "clearErrorLines");\n    function makeMarker(cm, labels, severity, multiple, tooltips) {\n      var marker = document.createElement("div"), inner = marker;\n      marker.className = "CodeMirror-lint-marker CodeMirror-lint-marker-" + severity;\n      if (multiple) {\n        inner = marker.appendChild(document.createElement("div"));\n        inner.className = "CodeMirror-lint-marker CodeMirror-lint-marker-multiple";\n      }\n      if (tooltips != false)\n        CodeMirror.on(inner, "mouseover", function(e) {\n          showTooltipFor(cm, e, labels, inner);\n        });\n      return marker;\n    }\n    __name(makeMarker, "makeMarker");\n    function getMaxSeverity(a, b) {\n      if (a == "error")\n        return a;\n      else\n        return b;\n    }\n    __name(getMaxSeverity, "getMaxSeverity");\n    function groupByLine(annotations) {\n      var lines = [];\n      for (var i = 0; i < annotations.length; ++i) {\n        var ann = annotations[i], line = ann.from.line;\n        (lines[line] || (lines[line] = [])).push(ann);\n      }\n      return lines;\n    }\n    __name(groupByLine, "groupByLine");\n    function annotationTooltip(ann) {\n      var severity = ann.severity;\n      if (!severity)\n        severity = "error";\n      var tip = document.createElement("div");\n      tip.className = "CodeMirror-lint-message CodeMirror-lint-message-" + severity;\n      if (typeof ann.messageHTML != "undefined") {\n        tip.innerHTML = ann.messageHTML;\n      } else {\n        tip.appendChild(document.createTextNode(ann.message));\n      }\n      return tip;\n    }\n    __name(annotationTooltip, "annotationTooltip");\n    function lintAsync(cm, getAnnotations) {\n      var state = cm.state.lint;\n      var id = ++state.waitingFor;\n      function abort() {\n        id = -1;\n        cm.off("change", abort);\n      }\n      __name(abort, "abort");\n      cm.on("change", abort);\n      getAnnotations(cm.getValue(), function(annotations, arg2) {\n        cm.off("change", abort);\n        if (state.waitingFor != id)\n          return;\n        if (arg2 && annotations instanceof CodeMirror)\n          annotations = arg2;\n        cm.operation(function() {\n          updateLinting(cm, annotations);\n        });\n      }, state.linterOptions, cm);\n    }\n    __name(lintAsync, "lintAsync");\n    function startLinting(cm) {\n      var state = cm.state.lint;\n      if (!state)\n        return;\n      var options = state.options;\n      var getAnnotations = options.getAnnotations || cm.getHelper(CodeMirror.Pos(0, 0), "lint");\n      if (!getAnnotations)\n        return;\n      if (options.async || getAnnotations.async) {\n        lintAsync(cm, getAnnotations);\n      } else {\n        var annotations = getAnnotations(cm.getValue(), state.linterOptions, cm);\n        if (!annotations)\n          return;\n        if (annotations.then)\n          annotations.then(function(issues) {\n            cm.operation(function() {\n              updateLinting(cm, issues);\n            });\n          });\n        else\n          cm.operation(function() {\n            updateLinting(cm, annotations);\n          });\n      }\n    }\n    __name(startLinting, "startLinting");\n    function updateLinting(cm, annotationsNotSorted) {\n      var state = cm.state.lint;\n      if (!state)\n        return;\n      var options = state.options;\n      clearMarks(cm);\n      var annotations = groupByLine(annotationsNotSorted);\n      for (var line = 0; line < annotations.length; ++line) {\n        var anns = annotations[line];\n        if (!anns)\n          continue;\n        var message = [];\n        anns = anns.filter(function(item) {\n          return message.indexOf(item.message) > -1 ? false : message.push(item.message);\n        });\n        var maxSeverity = null;\n        var tipLabel = state.hasGutter && document.createDocumentFragment();\n        for (var i = 0; i < anns.length; ++i) {\n          var ann = anns[i];\n          var severity = ann.severity;\n          if (!severity)\n            severity = "error";\n          maxSeverity = getMaxSeverity(maxSeverity, severity);\n          if (options.formatAnnotation)\n            ann = options.formatAnnotation(ann);\n          if (state.hasGutter)\n            tipLabel.appendChild(annotationTooltip(ann));\n          if (ann.to)\n            state.marked.push(cm.markText(ann.from, ann.to, {\n              className: "CodeMirror-lint-mark CodeMirror-lint-mark-" + severity,\n              __annotation: ann\n            }));\n        }\n        if (state.hasGutter)\n          cm.setGutterMarker(line, GUTTER_ID, makeMarker(cm, tipLabel, maxSeverity, annotations[line].length > 1, options.tooltips));\n        if (options.highlightLines)\n          cm.addLineClass(line, "wrap", LINT_LINE_ID + maxSeverity);\n      }\n      if (options.onUpdateLinting)\n        options.onUpdateLinting(annotationsNotSorted, annotations, cm);\n    }\n    __name(updateLinting, "updateLinting");\n    function onChange(cm) {\n      var state = cm.state.lint;\n      if (!state)\n        return;\n      clearTimeout(state.timeout);\n      state.timeout = setTimeout(function() {\n        startLinting(cm);\n      }, state.options.delay);\n    }\n    __name(onChange, "onChange");\n    function popupTooltips(cm, annotations, e) {\n      var target = e.target || e.srcElement;\n      var tooltip = document.createDocumentFragment();\n      for (var i = 0; i < annotations.length; i++) {\n        var ann = annotations[i];\n        tooltip.appendChild(annotationTooltip(ann));\n      }\n      showTooltipFor(cm, e, tooltip, target);\n    }\n    __name(popupTooltips, "popupTooltips");\n    function onMouseOver(cm, e) {\n      var target = e.target || e.srcElement;\n      if (!/\\bCodeMirror-lint-mark-/.test(target.className))\n        return;\n      var box = target.getBoundingClientRect(), x = (box.left + box.right) / 2, y = (box.top + box.bottom) / 2;\n      var spans = cm.findMarksAt(cm.coordsChar({ left: x, top: y }, "client"));\n      var annotations = [];\n      for (var i = 0; i < spans.length; ++i) {\n        var ann = spans[i].__annotation;\n        if (ann)\n          annotations.push(ann);\n      }\n      if (annotations.length)\n        popupTooltips(cm, annotations, e);\n    }\n    __name(onMouseOver, "onMouseOver");\n    CodeMirror.defineOption("lint", false, function(cm, val, old) {\n      if (old && old != CodeMirror.Init) {\n        clearMarks(cm);\n        if (cm.state.lint.options.lintOnChange !== false)\n          cm.off("change", onChange);\n        CodeMirror.off(cm.getWrapperElement(), "mouseover", cm.state.lint.onMouseOver);\n        clearTimeout(cm.state.lint.timeout);\n        delete cm.state.lint;\n      }\n      if (val) {\n        var gutters = cm.getOption("gutters"), hasLintGutter = false;\n        for (var i = 0; i < gutters.length; ++i)\n          if (gutters[i] == GUTTER_ID)\n            hasLintGutter = true;\n        var state = cm.state.lint = new LintState(cm, val, hasLintGutter);\n        if (state.options.lintOnChange)\n          cm.on("change", onChange);\n        if (state.options.tooltips != false && state.options.tooltips != "gutter")\n          CodeMirror.on(cm.getWrapperElement(), "mouseover", state.onMouseOver);\n        startLinting(cm);\n      }\n    });\n    CodeMirror.defineExtension("performLint", function() {\n      startLinting(this);\n    });\n  });\n})();\nvar lint = lint$2.exports;\nvar lint$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: "Module",\n  "default": lint\n}, [lint$2.exports]));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17481\n')}}]);