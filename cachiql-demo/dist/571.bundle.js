"use strict";(self.webpackChunkcachiql_demo=self.webpackChunkcachiql_demo||[]).push([[571,980,105],{54980:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "a": () => (/* binding */ matchbrackets$2),\n/* harmony export */   "m": () => (/* binding */ matchbrackets$1)\n/* harmony export */ });\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97480);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== "string" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== "default" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, "_mergeNamespaces");\nvar matchbrackets$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports);\n  })(function(CodeMirror) {\n    var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) && (document.documentMode == null || document.documentMode < 8);\n    var Pos = CodeMirror.Pos;\n    var matching = { "(": ")>", ")": "(<", "[": "]>", "]": "[<", "{": "}>", "}": "{<", "<": ">>", ">": "<<" };\n    function bracketRegex(config) {\n      return config && config.bracketRegex || /[(){}[\\]]/;\n    }\n    __name(bracketRegex, "bracketRegex");\n    function findMatchingBracket(cm, where, config) {\n      var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n      var afterCursor = config && config.afterCursor;\n      if (afterCursor == null)\n        afterCursor = /(^| )cm-fat-cursor($| )/.test(cm.getWrapperElement().className);\n      var re = bracketRegex(config);\n      var match = !afterCursor && pos >= 0 && re.test(line.text.charAt(pos)) && matching[line.text.charAt(pos)] || re.test(line.text.charAt(pos + 1)) && matching[line.text.charAt(++pos)];\n      if (!match)\n        return null;\n      var dir = match.charAt(1) == ">" ? 1 : -1;\n      if (config && config.strict && dir > 0 != (pos == where.ch))\n        return null;\n      var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n      var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style, config);\n      if (found == null)\n        return null;\n      return {\n        from: Pos(where.line, pos),\n        to: found && found.pos,\n        match: found && found.ch == match.charAt(0),\n        forward: dir > 0\n      };\n    }\n    __name(findMatchingBracket, "findMatchingBracket");\n    function scanForBracket(cm, where, dir, style, config) {\n      var maxScanLen = config && config.maxScanLineLength || 1e4;\n      var maxScanLines = config && config.maxScanLines || 1e3;\n      var stack = [];\n      var re = bracketRegex(config);\n      var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1) : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n      for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n        var line = cm.getLine(lineNo);\n        if (!line)\n          continue;\n        var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n        if (line.length > maxScanLen)\n          continue;\n        if (lineNo == where.line)\n          pos = where.ch - (dir < 0 ? 1 : 0);\n        for (; pos != end; pos += dir) {\n          var ch = line.charAt(pos);\n          if (re.test(ch) && (style === void 0 || (cm.getTokenTypeAt(Pos(lineNo, pos + 1)) || "") == (style || ""))) {\n            var match = matching[ch];\n            if (match && match.charAt(1) == ">" == dir > 0)\n              stack.push(ch);\n            else if (!stack.length)\n              return { pos: Pos(lineNo, pos), ch };\n            else\n              stack.pop();\n          }\n        }\n      }\n      return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n    }\n    __name(scanForBracket, "scanForBracket");\n    function matchBrackets(cm, autoclear, config) {\n      var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1e3, highlightNonMatching = config && config.highlightNonMatching;\n      var marks = [], ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, config);\n        if (match && (match.match || highlightNonMatching !== false) && cm.getLine(match.from.line).length <= maxHighlightLen) {\n          var style = match.match ? "CodeMirror-matchingbracket" : "CodeMirror-nonmatchingbracket";\n          marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), { className: style }));\n          if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n            marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), { className: style }));\n        }\n      }\n      if (marks.length) {\n        if (ie_lt8 && cm.state.focused)\n          cm.focus();\n        var clear = /* @__PURE__ */ __name(function() {\n          cm.operation(function() {\n            for (var i2 = 0; i2 < marks.length; i2++)\n              marks[i2].clear();\n          });\n        }, "clear");\n        if (autoclear)\n          setTimeout(clear, 800);\n        else\n          return clear;\n      }\n    }\n    __name(matchBrackets, "matchBrackets");\n    function doMatchBrackets(cm) {\n      cm.operation(function() {\n        if (cm.state.matchBrackets.currentlyHighlighted) {\n          cm.state.matchBrackets.currentlyHighlighted();\n          cm.state.matchBrackets.currentlyHighlighted = null;\n        }\n        cm.state.matchBrackets.currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n      });\n    }\n    __name(doMatchBrackets, "doMatchBrackets");\n    function clearHighlighted(cm) {\n      if (cm.state.matchBrackets && cm.state.matchBrackets.currentlyHighlighted) {\n        cm.state.matchBrackets.currentlyHighlighted();\n        cm.state.matchBrackets.currentlyHighlighted = null;\n      }\n    }\n    __name(clearHighlighted, "clearHighlighted");\n    CodeMirror.defineOption("matchBrackets", false, function(cm, val, old) {\n      if (old && old != CodeMirror.Init) {\n        cm.off("cursorActivity", doMatchBrackets);\n        cm.off("focus", doMatchBrackets);\n        cm.off("blur", clearHighlighted);\n        clearHighlighted(cm);\n      }\n      if (val) {\n        cm.state.matchBrackets = typeof val == "object" ? val : {};\n        cm.on("cursorActivity", doMatchBrackets);\n        cm.on("focus", doMatchBrackets);\n        cm.on("blur", clearHighlighted);\n      }\n    });\n    CodeMirror.defineExtension("matchBrackets", function() {\n      matchBrackets(this, true);\n    });\n    CodeMirror.defineExtension("findMatchingBracket", function(pos, config, oldConfig) {\n      if (oldConfig || typeof config == "boolean") {\n        if (!oldConfig) {\n          config = config ? { strict: true } : null;\n        } else {\n          oldConfig.strict = config;\n          config = oldConfig;\n        }\n      }\n      return findMatchingBracket(this, pos, config);\n    });\n    CodeMirror.defineExtension("scanForBracket", function(pos, dir, style, config) {\n      return scanForBracket(this, pos, dir, style, config);\n    });\n  });\n})();\nvar matchbrackets = matchbrackets$2.exports;\nvar matchbrackets$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: "Module",\n  "default": matchbrackets\n}, [matchbrackets$2.exports]));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///54980\n')},26105:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "a": () => (/* binding */ searchcursor$2),\n/* harmony export */   "s": () => (/* binding */ searchcursor$1)\n/* harmony export */ });\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97480);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== "string" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== "default" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, "_mergeNamespaces");\nvar searchcursor$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports);\n  })(function(CodeMirror) {\n    var Pos = CodeMirror.Pos;\n    function regexpFlags(regexp) {\n      var flags = regexp.flags;\n      return flags != null ? flags : (regexp.ignoreCase ? "i" : "") + (regexp.global ? "g" : "") + (regexp.multiline ? "m" : "");\n    }\n    __name(regexpFlags, "regexpFlags");\n    function ensureFlags(regexp, flags) {\n      var current = regexpFlags(regexp), target = current;\n      for (var i = 0; i < flags.length; i++)\n        if (target.indexOf(flags.charAt(i)) == -1)\n          target += flags.charAt(i);\n      return current == target ? regexp : new RegExp(regexp.source, target);\n    }\n    __name(ensureFlags, "ensureFlags");\n    function maybeMultiline(regexp) {\n      return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source);\n    }\n    __name(maybeMultiline, "maybeMultiline");\n    function searchRegexpForward(doc, regexp, start) {\n      regexp = ensureFlags(regexp, "g");\n      for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n        regexp.lastIndex = ch;\n        var string = doc.getLine(line), match = regexp.exec(string);\n        if (match)\n          return {\n            from: Pos(line, match.index),\n            to: Pos(line, match.index + match[0].length),\n            match\n          };\n      }\n    }\n    __name(searchRegexpForward, "searchRegexpForward");\n    function searchRegexpForwardMultiline(doc, regexp, start) {\n      if (!maybeMultiline(regexp))\n        return searchRegexpForward(doc, regexp, start);\n      regexp = ensureFlags(regexp, "gm");\n      var string, chunk = 1;\n      for (var line = start.line, last = doc.lastLine(); line <= last; ) {\n        for (var i = 0; i < chunk; i++) {\n          if (line > last)\n            break;\n          var curLine = doc.getLine(line++);\n          string = string == null ? curLine : string + "\\n" + curLine;\n        }\n        chunk = chunk * 2;\n        regexp.lastIndex = start.ch;\n        var match = regexp.exec(string);\n        if (match) {\n          var before = string.slice(0, match.index).split("\\n"), inside = match[0].split("\\n");\n          var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length;\n          return {\n            from: Pos(startLine, startCh),\n            to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n            match\n          };\n        }\n      }\n    }\n    __name(searchRegexpForwardMultiline, "searchRegexpForwardMultiline");\n    function lastMatchIn(string, regexp, endMargin) {\n      var match, from = 0;\n      while (from <= string.length) {\n        regexp.lastIndex = from;\n        var newMatch = regexp.exec(string);\n        if (!newMatch)\n          break;\n        var end = newMatch.index + newMatch[0].length;\n        if (end > string.length - endMargin)\n          break;\n        if (!match || end > match.index + match[0].length)\n          match = newMatch;\n        from = newMatch.index + 1;\n      }\n      return match;\n    }\n    __name(lastMatchIn, "lastMatchIn");\n    function searchRegexpBackward(doc, regexp, start) {\n      regexp = ensureFlags(regexp, "g");\n      for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n        var string = doc.getLine(line);\n        var match = lastMatchIn(string, regexp, ch < 0 ? 0 : string.length - ch);\n        if (match)\n          return {\n            from: Pos(line, match.index),\n            to: Pos(line, match.index + match[0].length),\n            match\n          };\n      }\n    }\n    __name(searchRegexpBackward, "searchRegexpBackward");\n    function searchRegexpBackwardMultiline(doc, regexp, start) {\n      if (!maybeMultiline(regexp))\n        return searchRegexpBackward(doc, regexp, start);\n      regexp = ensureFlags(regexp, "gm");\n      var string, chunkSize = 1, endMargin = doc.getLine(start.line).length - start.ch;\n      for (var line = start.line, first = doc.firstLine(); line >= first; ) {\n        for (var i = 0; i < chunkSize && line >= first; i++) {\n          var curLine = doc.getLine(line--);\n          string = string == null ? curLine : curLine + "\\n" + string;\n        }\n        chunkSize *= 2;\n        var match = lastMatchIn(string, regexp, endMargin);\n        if (match) {\n          var before = string.slice(0, match.index).split("\\n"), inside = match[0].split("\\n");\n          var startLine = line + before.length, startCh = before[before.length - 1].length;\n          return {\n            from: Pos(startLine, startCh),\n            to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n            match\n          };\n        }\n      }\n    }\n    __name(searchRegexpBackwardMultiline, "searchRegexpBackwardMultiline");\n    var doFold, noFold;\n    if (String.prototype.normalize) {\n      doFold = /* @__PURE__ */ __name(function(str) {\n        return str.normalize("NFD").toLowerCase();\n      }, "doFold");\n      noFold = /* @__PURE__ */ __name(function(str) {\n        return str.normalize("NFD");\n      }, "noFold");\n    } else {\n      doFold = /* @__PURE__ */ __name(function(str) {\n        return str.toLowerCase();\n      }, "doFold");\n      noFold = /* @__PURE__ */ __name(function(str) {\n        return str;\n      }, "noFold");\n    }\n    function adjustPos(orig, folded, pos, foldFunc) {\n      if (orig.length == folded.length)\n        return pos;\n      for (var min = 0, max = pos + Math.max(0, orig.length - folded.length); ; ) {\n        if (min == max)\n          return min;\n        var mid = min + max >> 1;\n        var len = foldFunc(orig.slice(0, mid)).length;\n        if (len == pos)\n          return mid;\n        else if (len > pos)\n          max = mid;\n        else\n          min = mid + 1;\n      }\n    }\n    __name(adjustPos, "adjustPos");\n    function searchStringForward(doc, query, start, caseFold) {\n      if (!query.length)\n        return null;\n      var fold = caseFold ? doFold : noFold;\n      var lines = fold(query).split(/\\r|\\n\\r?/);\n      search:\n        for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n          var orig = doc.getLine(line).slice(ch), string = fold(orig);\n          if (lines.length == 1) {\n            var found = string.indexOf(lines[0]);\n            if (found == -1)\n              continue search;\n            var start = adjustPos(orig, string, found, fold) + ch;\n            return {\n              from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n              to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)\n            };\n          } else {\n            var cutFrom = string.length - lines[0].length;\n            if (string.slice(cutFrom) != lines[0])\n              continue search;\n            for (var i = 1; i < lines.length - 1; i++)\n              if (fold(doc.getLine(line + i)) != lines[i])\n                continue search;\n            var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1];\n            if (endString.slice(0, lastLine.length) != lastLine)\n              continue search;\n            return {\n              from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n              to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))\n            };\n          }\n        }\n    }\n    __name(searchStringForward, "searchStringForward");\n    function searchStringBackward(doc, query, start, caseFold) {\n      if (!query.length)\n        return null;\n      var fold = caseFold ? doFold : noFold;\n      var lines = fold(query).split(/\\r|\\n\\r?/);\n      search:\n        for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n          var orig = doc.getLine(line);\n          if (ch > -1)\n            orig = orig.slice(0, ch);\n          var string = fold(orig);\n          if (lines.length == 1) {\n            var found = string.lastIndexOf(lines[0]);\n            if (found == -1)\n              continue search;\n            return {\n              from: Pos(line, adjustPos(orig, string, found, fold)),\n              to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))\n            };\n          } else {\n            var lastLine = lines[lines.length - 1];\n            if (string.slice(0, lastLine.length) != lastLine)\n              continue search;\n            for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n              if (fold(doc.getLine(start + i)) != lines[i])\n                continue search;\n            var top = doc.getLine(line + 1 - lines.length), topString = fold(top);\n            if (topString.slice(topString.length - lines[0].length) != lines[0])\n              continue search;\n            return {\n              from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n              to: Pos(line, adjustPos(orig, string, lastLine.length, fold))\n            };\n          }\n        }\n    }\n    __name(searchStringBackward, "searchStringBackward");\n    function SearchCursor(doc, query, pos, options) {\n      this.atOccurrence = false;\n      this.afterEmptyMatch = false;\n      this.doc = doc;\n      pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n      this.pos = { from: pos, to: pos };\n      var caseFold;\n      if (typeof options == "object") {\n        caseFold = options.caseFold;\n      } else {\n        caseFold = options;\n        options = null;\n      }\n      if (typeof query == "string") {\n        if (caseFold == null)\n          caseFold = false;\n        this.matches = function(reverse, pos2) {\n          return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos2, caseFold);\n        };\n      } else {\n        query = ensureFlags(query, "gm");\n        if (!options || options.multiline !== false)\n          this.matches = function(reverse, pos2) {\n            return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos2);\n          };\n        else\n          this.matches = function(reverse, pos2) {\n            return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos2);\n          };\n      }\n    }\n    __name(SearchCursor, "SearchCursor");\n    SearchCursor.prototype = {\n      findNext: function() {\n        return this.find(false);\n      },\n      findPrevious: function() {\n        return this.find(true);\n      },\n      find: function(reverse) {\n        var head = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n        if (this.afterEmptyMatch && this.atOccurrence) {\n          head = Pos(head.line, head.ch);\n          if (reverse) {\n            head.ch--;\n            if (head.ch < 0) {\n              head.line--;\n              head.ch = (this.doc.getLine(head.line) || "").length;\n            }\n          } else {\n            head.ch++;\n            if (head.ch > (this.doc.getLine(head.line) || "").length) {\n              head.ch = 0;\n              head.line++;\n            }\n          }\n          if (CodeMirror.cmpPos(head, this.doc.clipPos(head)) != 0) {\n            return this.atOccurrence = false;\n          }\n        }\n        var result = this.matches(reverse, head);\n        this.afterEmptyMatch = result && CodeMirror.cmpPos(result.from, result.to) == 0;\n        if (result) {\n          this.pos = result;\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        } else {\n          var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0);\n          this.pos = { from: end, to: end };\n          return this.atOccurrence = false;\n        }\n      },\n      from: function() {\n        if (this.atOccurrence)\n          return this.pos.from;\n      },\n      to: function() {\n        if (this.atOccurrence)\n          return this.pos.to;\n      },\n      replace: function(newText, origin) {\n        if (!this.atOccurrence)\n          return;\n        var lines = CodeMirror.splitLines(newText);\n        this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n        this.pos.to = Pos(this.pos.from.line + lines.length - 1, lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n      }\n    };\n    CodeMirror.defineExtension("getSearchCursor", function(query, pos, caseFold) {\n      return new SearchCursor(this.doc, query, pos, caseFold);\n    });\n    CodeMirror.defineDocExtension("getSearchCursor", function(query, pos, caseFold) {\n      return new SearchCursor(this, query, pos, caseFold);\n    });\n    CodeMirror.defineExtension("selectMatches", function(query, caseFold) {\n      var ranges = [];\n      var cur = this.getSearchCursor(query, this.getCursor("from"), caseFold);\n      while (cur.findNext()) {\n        if (CodeMirror.cmpPos(cur.to(), this.getCursor("to")) > 0)\n          break;\n        ranges.push({ anchor: cur.from(), head: cur.to() });\n      }\n      if (ranges.length)\n        this.setSelections(ranges, 0);\n    });\n  });\n})();\nvar searchcursor = searchcursor$2.exports;\nvar searchcursor$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: "Module",\n  "default": searchcursor\n}, [searchcursor$2.exports]));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26105\n')},13571:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "s": () => (/* binding */ sublime$1)\n/* harmony export */ });\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97480);\n/* harmony import */ var _searchcursor_es_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26105);\n/* harmony import */ var _matchbrackets_es_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(54980);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\n\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== "string" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== "default" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, "_mergeNamespaces");\nvar sublime$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports, _searchcursor_es_js__WEBPACK_IMPORTED_MODULE_1__.a.exports, _matchbrackets_es_js__WEBPACK_IMPORTED_MODULE_2__.a.exports);\n  })(function(CodeMirror) {\n    var cmds = CodeMirror.commands;\n    var Pos = CodeMirror.Pos;\n    function findPosSubword(doc, start, dir) {\n      if (dir < 0 && start.ch == 0)\n        return doc.clipPos(Pos(start.line - 1));\n      var line = doc.getLine(start.line);\n      if (dir > 0 && start.ch >= line.length)\n        return doc.clipPos(Pos(start.line + 1, 0));\n      var state = "start", type, startPos = start.ch;\n      for (var pos = startPos, e = dir < 0 ? 0 : line.length, i = 0; pos != e; pos += dir, i++) {\n        var next = line.charAt(dir < 0 ? pos - 1 : pos);\n        var cat = next != "_" && CodeMirror.isWordChar(next) ? "w" : "o";\n        if (cat == "w" && next.toUpperCase() == next)\n          cat = "W";\n        if (state == "start") {\n          if (cat != "o") {\n            state = "in";\n            type = cat;\n          } else\n            startPos = pos + dir;\n        } else if (state == "in") {\n          if (type != cat) {\n            if (type == "w" && cat == "W" && dir < 0)\n              pos--;\n            if (type == "W" && cat == "w" && dir > 0) {\n              if (pos == startPos + 1) {\n                type = "w";\n                continue;\n              } else\n                pos--;\n            }\n            break;\n          }\n        }\n      }\n      return Pos(start.line, pos);\n    }\n    __name(findPosSubword, "findPosSubword");\n    function moveSubword(cm, dir) {\n      cm.extendSelectionsBy(function(range) {\n        if (cm.display.shift || cm.doc.extend || range.empty())\n          return findPosSubword(cm.doc, range.head, dir);\n        else\n          return dir < 0 ? range.from() : range.to();\n      });\n    }\n    __name(moveSubword, "moveSubword");\n    cmds.goSubwordLeft = function(cm) {\n      moveSubword(cm, -1);\n    };\n    cmds.goSubwordRight = function(cm) {\n      moveSubword(cm, 1);\n    };\n    cmds.scrollLineUp = function(cm) {\n      var info = cm.getScrollInfo();\n      if (!cm.somethingSelected()) {\n        var visibleBottomLine = cm.lineAtHeight(info.top + info.clientHeight, "local");\n        if (cm.getCursor().line >= visibleBottomLine)\n          cm.execCommand("goLineUp");\n      }\n      cm.scrollTo(null, info.top - cm.defaultTextHeight());\n    };\n    cmds.scrollLineDown = function(cm) {\n      var info = cm.getScrollInfo();\n      if (!cm.somethingSelected()) {\n        var visibleTopLine = cm.lineAtHeight(info.top, "local") + 1;\n        if (cm.getCursor().line <= visibleTopLine)\n          cm.execCommand("goLineDown");\n      }\n      cm.scrollTo(null, info.top + cm.defaultTextHeight());\n    };\n    cmds.splitSelectionByLine = function(cm) {\n      var ranges = cm.listSelections(), lineRanges = [];\n      for (var i = 0; i < ranges.length; i++) {\n        var from = ranges[i].from(), to = ranges[i].to();\n        for (var line = from.line; line <= to.line; ++line)\n          if (!(to.line > from.line && line == to.line && to.ch == 0))\n            lineRanges.push({\n              anchor: line == from.line ? from : Pos(line, 0),\n              head: line == to.line ? to : Pos(line)\n            });\n      }\n      cm.setSelections(lineRanges, 0);\n    };\n    cmds.singleSelectionTop = function(cm) {\n      var range = cm.listSelections()[0];\n      cm.setSelection(range.anchor, range.head, { scroll: false });\n    };\n    cmds.selectLine = function(cm) {\n      var ranges = cm.listSelections(), extended = [];\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        extended.push({\n          anchor: Pos(range.from().line, 0),\n          head: Pos(range.to().line + 1, 0)\n        });\n      }\n      cm.setSelections(extended);\n    };\n    function insertLine(cm, above) {\n      if (cm.isReadOnly())\n        return CodeMirror.Pass;\n      cm.operation(function() {\n        var len = cm.listSelections().length, newSelection = [], last = -1;\n        for (var i = 0; i < len; i++) {\n          var head = cm.listSelections()[i].head;\n          if (head.line <= last)\n            continue;\n          var at = Pos(head.line + (above ? 0 : 1), 0);\n          cm.replaceRange("\\n", at, null, "+insertLine");\n          cm.indentLine(at.line, null, true);\n          newSelection.push({ head: at, anchor: at });\n          last = head.line + 1;\n        }\n        cm.setSelections(newSelection);\n      });\n      cm.execCommand("indentAuto");\n    }\n    __name(insertLine, "insertLine");\n    cmds.insertLineAfter = function(cm) {\n      return insertLine(cm, false);\n    };\n    cmds.insertLineBefore = function(cm) {\n      return insertLine(cm, true);\n    };\n    function wordAt(cm, pos) {\n      var start = pos.ch, end = start, line = cm.getLine(pos.line);\n      while (start && CodeMirror.isWordChar(line.charAt(start - 1)))\n        --start;\n      while (end < line.length && CodeMirror.isWordChar(line.charAt(end)))\n        ++end;\n      return { from: Pos(pos.line, start), to: Pos(pos.line, end), word: line.slice(start, end) };\n    }\n    __name(wordAt, "wordAt");\n    cmds.selectNextOccurrence = function(cm) {\n      var from = cm.getCursor("from"), to = cm.getCursor("to");\n      var fullWord = cm.state.sublimeFindFullWord == cm.doc.sel;\n      if (CodeMirror.cmpPos(from, to) == 0) {\n        var word = wordAt(cm, from);\n        if (!word.word)\n          return;\n        cm.setSelection(word.from, word.to);\n        fullWord = true;\n      } else {\n        var text = cm.getRange(from, to);\n        var query = fullWord ? new RegExp("\\\\b" + text + "\\\\b") : text;\n        var cur = cm.getSearchCursor(query, to);\n        var found = cur.findNext();\n        if (!found) {\n          cur = cm.getSearchCursor(query, Pos(cm.firstLine(), 0));\n          found = cur.findNext();\n        }\n        if (!found || isSelectedRange(cm.listSelections(), cur.from(), cur.to()))\n          return;\n        cm.addSelection(cur.from(), cur.to());\n      }\n      if (fullWord)\n        cm.state.sublimeFindFullWord = cm.doc.sel;\n    };\n    cmds.skipAndSelectNextOccurrence = function(cm) {\n      var prevAnchor = cm.getCursor("anchor"), prevHead = cm.getCursor("head");\n      cmds.selectNextOccurrence(cm);\n      if (CodeMirror.cmpPos(prevAnchor, prevHead) != 0) {\n        cm.doc.setSelections(cm.doc.listSelections().filter(function(sel) {\n          return sel.anchor != prevAnchor || sel.head != prevHead;\n        }));\n      }\n    };\n    function addCursorToSelection(cm, dir) {\n      var ranges = cm.listSelections(), newRanges = [];\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        var newAnchor = cm.findPosV(range.anchor, dir, "line", range.anchor.goalColumn);\n        var newHead = cm.findPosV(range.head, dir, "line", range.head.goalColumn);\n        newAnchor.goalColumn = range.anchor.goalColumn != null ? range.anchor.goalColumn : cm.cursorCoords(range.anchor, "div").left;\n        newHead.goalColumn = range.head.goalColumn != null ? range.head.goalColumn : cm.cursorCoords(range.head, "div").left;\n        var newRange = { anchor: newAnchor, head: newHead };\n        newRanges.push(range);\n        newRanges.push(newRange);\n      }\n      cm.setSelections(newRanges);\n    }\n    __name(addCursorToSelection, "addCursorToSelection");\n    cmds.addCursorToPrevLine = function(cm) {\n      addCursorToSelection(cm, -1);\n    };\n    cmds.addCursorToNextLine = function(cm) {\n      addCursorToSelection(cm, 1);\n    };\n    function isSelectedRange(ranges, from, to) {\n      for (var i = 0; i < ranges.length; i++)\n        if (CodeMirror.cmpPos(ranges[i].from(), from) == 0 && CodeMirror.cmpPos(ranges[i].to(), to) == 0)\n          return true;\n      return false;\n    }\n    __name(isSelectedRange, "isSelectedRange");\n    var mirror = "(){}[]";\n    function selectBetweenBrackets(cm) {\n      var ranges = cm.listSelections(), newRanges = [];\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i], pos = range.head, opening = cm.scanForBracket(pos, -1);\n        if (!opening)\n          return false;\n        for (; ; ) {\n          var closing = cm.scanForBracket(pos, 1);\n          if (!closing)\n            return false;\n          if (closing.ch == mirror.charAt(mirror.indexOf(opening.ch) + 1)) {\n            var startPos = Pos(opening.pos.line, opening.pos.ch + 1);\n            if (CodeMirror.cmpPos(startPos, range.from()) == 0 && CodeMirror.cmpPos(closing.pos, range.to()) == 0) {\n              opening = cm.scanForBracket(opening.pos, -1);\n              if (!opening)\n                return false;\n            } else {\n              newRanges.push({ anchor: startPos, head: closing.pos });\n              break;\n            }\n          }\n          pos = Pos(closing.pos.line, closing.pos.ch + 1);\n        }\n      }\n      cm.setSelections(newRanges);\n      return true;\n    }\n    __name(selectBetweenBrackets, "selectBetweenBrackets");\n    cmds.selectScope = function(cm) {\n      selectBetweenBrackets(cm) || cm.execCommand("selectAll");\n    };\n    cmds.selectBetweenBrackets = function(cm) {\n      if (!selectBetweenBrackets(cm))\n        return CodeMirror.Pass;\n    };\n    function puncType(type) {\n      return !type ? null : /\\bpunctuation\\b/.test(type) ? type : void 0;\n    }\n    __name(puncType, "puncType");\n    cmds.goToBracket = function(cm) {\n      cm.extendSelectionsBy(function(range) {\n        var next = cm.scanForBracket(range.head, 1, puncType(cm.getTokenTypeAt(range.head)));\n        if (next && CodeMirror.cmpPos(next.pos, range.head) != 0)\n          return next.pos;\n        var prev = cm.scanForBracket(range.head, -1, puncType(cm.getTokenTypeAt(Pos(range.head.line, range.head.ch + 1))));\n        return prev && Pos(prev.pos.line, prev.pos.ch + 1) || range.head;\n      });\n    };\n    cmds.swapLineUp = function(cm) {\n      if (cm.isReadOnly())\n        return CodeMirror.Pass;\n      var ranges = cm.listSelections(), linesToMove = [], at = cm.firstLine() - 1, newSels = [];\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i], from = range.from().line - 1, to = range.to().line;\n        newSels.push({\n          anchor: Pos(range.anchor.line - 1, range.anchor.ch),\n          head: Pos(range.head.line - 1, range.head.ch)\n        });\n        if (range.to().ch == 0 && !range.empty())\n          --to;\n        if (from > at)\n          linesToMove.push(from, to);\n        else if (linesToMove.length)\n          linesToMove[linesToMove.length - 1] = to;\n        at = to;\n      }\n      cm.operation(function() {\n        for (var i2 = 0; i2 < linesToMove.length; i2 += 2) {\n          var from2 = linesToMove[i2], to2 = linesToMove[i2 + 1];\n          var line = cm.getLine(from2);\n          cm.replaceRange("", Pos(from2, 0), Pos(from2 + 1, 0), "+swapLine");\n          if (to2 > cm.lastLine())\n            cm.replaceRange("\\n" + line, Pos(cm.lastLine()), null, "+swapLine");\n          else\n            cm.replaceRange(line + "\\n", Pos(to2, 0), null, "+swapLine");\n        }\n        cm.setSelections(newSels);\n        cm.scrollIntoView();\n      });\n    };\n    cmds.swapLineDown = function(cm) {\n      if (cm.isReadOnly())\n        return CodeMirror.Pass;\n      var ranges = cm.listSelections(), linesToMove = [], at = cm.lastLine() + 1;\n      for (var i = ranges.length - 1; i >= 0; i--) {\n        var range = ranges[i], from = range.to().line + 1, to = range.from().line;\n        if (range.to().ch == 0 && !range.empty())\n          from--;\n        if (from < at)\n          linesToMove.push(from, to);\n        else if (linesToMove.length)\n          linesToMove[linesToMove.length - 1] = to;\n        at = to;\n      }\n      cm.operation(function() {\n        for (var i2 = linesToMove.length - 2; i2 >= 0; i2 -= 2) {\n          var from2 = linesToMove[i2], to2 = linesToMove[i2 + 1];\n          var line = cm.getLine(from2);\n          if (from2 == cm.lastLine())\n            cm.replaceRange("", Pos(from2 - 1), Pos(from2), "+swapLine");\n          else\n            cm.replaceRange("", Pos(from2, 0), Pos(from2 + 1, 0), "+swapLine");\n          cm.replaceRange(line + "\\n", Pos(to2, 0), null, "+swapLine");\n        }\n        cm.scrollIntoView();\n      });\n    };\n    cmds.toggleCommentIndented = function(cm) {\n      cm.toggleComment({ indent: true });\n    };\n    cmds.joinLines = function(cm) {\n      var ranges = cm.listSelections(), joined = [];\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i], from = range.from();\n        var start = from.line, end = range.to().line;\n        while (i < ranges.length - 1 && ranges[i + 1].from().line == end)\n          end = ranges[++i].to().line;\n        joined.push({ start, end, anchor: !range.empty() && from });\n      }\n      cm.operation(function() {\n        var offset = 0, ranges2 = [];\n        for (var i2 = 0; i2 < joined.length; i2++) {\n          var obj = joined[i2];\n          var anchor = obj.anchor && Pos(obj.anchor.line - offset, obj.anchor.ch), head;\n          for (var line = obj.start; line <= obj.end; line++) {\n            var actual = line - offset;\n            if (line == obj.end)\n              head = Pos(actual, cm.getLine(actual).length + 1);\n            if (actual < cm.lastLine()) {\n              cm.replaceRange(" ", Pos(actual), Pos(actual + 1, /^\\s*/.exec(cm.getLine(actual + 1))[0].length));\n              ++offset;\n            }\n          }\n          ranges2.push({ anchor: anchor || head, head });\n        }\n        cm.setSelections(ranges2, 0);\n      });\n    };\n    cmds.duplicateLine = function(cm) {\n      cm.operation(function() {\n        var rangeCount = cm.listSelections().length;\n        for (var i = 0; i < rangeCount; i++) {\n          var range = cm.listSelections()[i];\n          if (range.empty())\n            cm.replaceRange(cm.getLine(range.head.line) + "\\n", Pos(range.head.line, 0));\n          else\n            cm.replaceRange(cm.getRange(range.from(), range.to()), range.from());\n        }\n        cm.scrollIntoView();\n      });\n    };\n    function sortLines(cm, caseSensitive, direction) {\n      if (cm.isReadOnly())\n        return CodeMirror.Pass;\n      var ranges = cm.listSelections(), toSort = [], selected;\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.empty())\n          continue;\n        var from = range.from().line, to = range.to().line;\n        while (i < ranges.length - 1 && ranges[i + 1].from().line == to)\n          to = ranges[++i].to().line;\n        if (!ranges[i].to().ch)\n          to--;\n        toSort.push(from, to);\n      }\n      if (toSort.length)\n        selected = true;\n      else\n        toSort.push(cm.firstLine(), cm.lastLine());\n      cm.operation(function() {\n        var ranges2 = [];\n        for (var i2 = 0; i2 < toSort.length; i2 += 2) {\n          var from2 = toSort[i2], to2 = toSort[i2 + 1];\n          var start = Pos(from2, 0), end = Pos(to2);\n          var lines = cm.getRange(start, end, false);\n          if (caseSensitive)\n            lines.sort(function(a, b) {\n              return a < b ? -direction : a == b ? 0 : direction;\n            });\n          else\n            lines.sort(function(a, b) {\n              var au = a.toUpperCase(), bu = b.toUpperCase();\n              if (au != bu) {\n                a = au;\n                b = bu;\n              }\n              return a < b ? -direction : a == b ? 0 : direction;\n            });\n          cm.replaceRange(lines, start, end);\n          if (selected)\n            ranges2.push({ anchor: start, head: Pos(to2 + 1, 0) });\n        }\n        if (selected)\n          cm.setSelections(ranges2, 0);\n      });\n    }\n    __name(sortLines, "sortLines");\n    cmds.sortLines = function(cm) {\n      sortLines(cm, true, 1);\n    };\n    cmds.reverseSortLines = function(cm) {\n      sortLines(cm, true, -1);\n    };\n    cmds.sortLinesInsensitive = function(cm) {\n      sortLines(cm, false, 1);\n    };\n    cmds.reverseSortLinesInsensitive = function(cm) {\n      sortLines(cm, false, -1);\n    };\n    cmds.nextBookmark = function(cm) {\n      var marks = cm.state.sublimeBookmarks;\n      if (marks)\n        while (marks.length) {\n          var current = marks.shift();\n          var found = current.find();\n          if (found) {\n            marks.push(current);\n            return cm.setSelection(found.from, found.to);\n          }\n        }\n    };\n    cmds.prevBookmark = function(cm) {\n      var marks = cm.state.sublimeBookmarks;\n      if (marks)\n        while (marks.length) {\n          marks.unshift(marks.pop());\n          var found = marks[marks.length - 1].find();\n          if (!found)\n            marks.pop();\n          else\n            return cm.setSelection(found.from, found.to);\n        }\n    };\n    cmds.toggleBookmark = function(cm) {\n      var ranges = cm.listSelections();\n      var marks = cm.state.sublimeBookmarks || (cm.state.sublimeBookmarks = []);\n      for (var i = 0; i < ranges.length; i++) {\n        var from = ranges[i].from(), to = ranges[i].to();\n        var found = ranges[i].empty() ? cm.findMarksAt(from) : cm.findMarks(from, to);\n        for (var j = 0; j < found.length; j++) {\n          if (found[j].sublimeBookmark) {\n            found[j].clear();\n            for (var k = 0; k < marks.length; k++)\n              if (marks[k] == found[j])\n                marks.splice(k--, 1);\n            break;\n          }\n        }\n        if (j == found.length)\n          marks.push(cm.markText(from, to, { sublimeBookmark: true, clearWhenEmpty: false }));\n      }\n    };\n    cmds.clearBookmarks = function(cm) {\n      var marks = cm.state.sublimeBookmarks;\n      if (marks)\n        for (var i = 0; i < marks.length; i++)\n          marks[i].clear();\n      marks.length = 0;\n    };\n    cmds.selectBookmarks = function(cm) {\n      var marks = cm.state.sublimeBookmarks, ranges = [];\n      if (marks)\n        for (var i = 0; i < marks.length; i++) {\n          var found = marks[i].find();\n          if (!found)\n            marks.splice(i--, 0);\n          else\n            ranges.push({ anchor: found.from, head: found.to });\n        }\n      if (ranges.length)\n        cm.setSelections(ranges, 0);\n    };\n    function modifyWordOrSelection(cm, mod) {\n      cm.operation(function() {\n        var ranges = cm.listSelections(), indices = [], replacements = [];\n        for (var i = 0; i < ranges.length; i++) {\n          var range = ranges[i];\n          if (range.empty()) {\n            indices.push(i);\n            replacements.push("");\n          } else\n            replacements.push(mod(cm.getRange(range.from(), range.to())));\n        }\n        cm.replaceSelections(replacements, "around", "case");\n        for (var i = indices.length - 1, at; i >= 0; i--) {\n          var range = ranges[indices[i]];\n          if (at && CodeMirror.cmpPos(range.head, at) > 0)\n            continue;\n          var word = wordAt(cm, range.head);\n          at = word.from;\n          cm.replaceRange(mod(word.word), word.from, word.to);\n        }\n      });\n    }\n    __name(modifyWordOrSelection, "modifyWordOrSelection");\n    cmds.smartBackspace = function(cm) {\n      if (cm.somethingSelected())\n        return CodeMirror.Pass;\n      cm.operation(function() {\n        var cursors = cm.listSelections();\n        var indentUnit = cm.getOption("indentUnit");\n        for (var i = cursors.length - 1; i >= 0; i--) {\n          var cursor = cursors[i].head;\n          var toStartOfLine = cm.getRange({ line: cursor.line, ch: 0 }, cursor);\n          var column = CodeMirror.countColumn(toStartOfLine, null, cm.getOption("tabSize"));\n          var deletePos = cm.findPosH(cursor, -1, "char", false);\n          if (toStartOfLine && !/\\S/.test(toStartOfLine) && column % indentUnit == 0) {\n            var prevIndent = new Pos(cursor.line, CodeMirror.findColumn(toStartOfLine, column - indentUnit, indentUnit));\n            if (prevIndent.ch != cursor.ch)\n              deletePos = prevIndent;\n          }\n          cm.replaceRange("", deletePos, cursor, "+delete");\n        }\n      });\n    };\n    cmds.delLineRight = function(cm) {\n      cm.operation(function() {\n        var ranges = cm.listSelections();\n        for (var i = ranges.length - 1; i >= 0; i--)\n          cm.replaceRange("", ranges[i].anchor, Pos(ranges[i].to().line), "+delete");\n        cm.scrollIntoView();\n      });\n    };\n    cmds.upcaseAtCursor = function(cm) {\n      modifyWordOrSelection(cm, function(str) {\n        return str.toUpperCase();\n      });\n    };\n    cmds.downcaseAtCursor = function(cm) {\n      modifyWordOrSelection(cm, function(str) {\n        return str.toLowerCase();\n      });\n    };\n    cmds.setSublimeMark = function(cm) {\n      if (cm.state.sublimeMark)\n        cm.state.sublimeMark.clear();\n      cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n    };\n    cmds.selectToSublimeMark = function(cm) {\n      var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n      if (found)\n        cm.setSelection(cm.getCursor(), found);\n    };\n    cmds.deleteToSublimeMark = function(cm) {\n      var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n      if (found) {\n        var from = cm.getCursor(), to = found;\n        if (CodeMirror.cmpPos(from, to) > 0) {\n          var tmp = to;\n          to = from;\n          from = tmp;\n        }\n        cm.state.sublimeKilled = cm.getRange(from, to);\n        cm.replaceRange("", from, to);\n      }\n    };\n    cmds.swapWithSublimeMark = function(cm) {\n      var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n      if (found) {\n        cm.state.sublimeMark.clear();\n        cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n        cm.setCursor(found);\n      }\n    };\n    cmds.sublimeYank = function(cm) {\n      if (cm.state.sublimeKilled != null)\n        cm.replaceSelection(cm.state.sublimeKilled, null, "paste");\n    };\n    cmds.showInCenter = function(cm) {\n      var pos = cm.cursorCoords(null, "local");\n      cm.scrollTo(null, (pos.top + pos.bottom) / 2 - cm.getScrollInfo().clientHeight / 2);\n    };\n    function getTarget(cm) {\n      var from = cm.getCursor("from"), to = cm.getCursor("to");\n      if (CodeMirror.cmpPos(from, to) == 0) {\n        var word = wordAt(cm, from);\n        if (!word.word)\n          return;\n        from = word.from;\n        to = word.to;\n      }\n      return { from, to, query: cm.getRange(from, to), word };\n    }\n    __name(getTarget, "getTarget");\n    function findAndGoTo(cm, forward) {\n      var target = getTarget(cm);\n      if (!target)\n        return;\n      var query = target.query;\n      var cur = cm.getSearchCursor(query, forward ? target.to : target.from);\n      if (forward ? cur.findNext() : cur.findPrevious()) {\n        cm.setSelection(cur.from(), cur.to());\n      } else {\n        cur = cm.getSearchCursor(query, forward ? Pos(cm.firstLine(), 0) : cm.clipPos(Pos(cm.lastLine())));\n        if (forward ? cur.findNext() : cur.findPrevious())\n          cm.setSelection(cur.from(), cur.to());\n        else if (target.word)\n          cm.setSelection(target.from, target.to);\n      }\n    }\n    __name(findAndGoTo, "findAndGoTo");\n    cmds.findUnder = function(cm) {\n      findAndGoTo(cm, true);\n    };\n    cmds.findUnderPrevious = function(cm) {\n      findAndGoTo(cm, false);\n    };\n    cmds.findAllUnder = function(cm) {\n      var target = getTarget(cm);\n      if (!target)\n        return;\n      var cur = cm.getSearchCursor(target.query);\n      var matches = [];\n      var primaryIndex = -1;\n      while (cur.findNext()) {\n        matches.push({ anchor: cur.from(), head: cur.to() });\n        if (cur.from().line <= target.from.line && cur.from().ch <= target.from.ch)\n          primaryIndex++;\n      }\n      cm.setSelections(matches, primaryIndex);\n    };\n    var keyMap = CodeMirror.keyMap;\n    keyMap.macSublime = {\n      "Cmd-Left": "goLineStartSmart",\n      "Shift-Tab": "indentLess",\n      "Shift-Ctrl-K": "deleteLine",\n      "Alt-Q": "wrapLines",\n      "Ctrl-Left": "goSubwordLeft",\n      "Ctrl-Right": "goSubwordRight",\n      "Ctrl-Alt-Up": "scrollLineUp",\n      "Ctrl-Alt-Down": "scrollLineDown",\n      "Cmd-L": "selectLine",\n      "Shift-Cmd-L": "splitSelectionByLine",\n      "Esc": "singleSelectionTop",\n      "Cmd-Enter": "insertLineAfter",\n      "Shift-Cmd-Enter": "insertLineBefore",\n      "Cmd-D": "selectNextOccurrence",\n      "Shift-Cmd-Space": "selectScope",\n      "Shift-Cmd-M": "selectBetweenBrackets",\n      "Cmd-M": "goToBracket",\n      "Cmd-Ctrl-Up": "swapLineUp",\n      "Cmd-Ctrl-Down": "swapLineDown",\n      "Cmd-/": "toggleCommentIndented",\n      "Cmd-J": "joinLines",\n      "Shift-Cmd-D": "duplicateLine",\n      "F5": "sortLines",\n      "Shift-F5": "reverseSortLines",\n      "Cmd-F5": "sortLinesInsensitive",\n      "Shift-Cmd-F5": "reverseSortLinesInsensitive",\n      "F2": "nextBookmark",\n      "Shift-F2": "prevBookmark",\n      "Cmd-F2": "toggleBookmark",\n      "Shift-Cmd-F2": "clearBookmarks",\n      "Alt-F2": "selectBookmarks",\n      "Backspace": "smartBackspace",\n      "Cmd-K Cmd-D": "skipAndSelectNextOccurrence",\n      "Cmd-K Cmd-K": "delLineRight",\n      "Cmd-K Cmd-U": "upcaseAtCursor",\n      "Cmd-K Cmd-L": "downcaseAtCursor",\n      "Cmd-K Cmd-Space": "setSublimeMark",\n      "Cmd-K Cmd-A": "selectToSublimeMark",\n      "Cmd-K Cmd-W": "deleteToSublimeMark",\n      "Cmd-K Cmd-X": "swapWithSublimeMark",\n      "Cmd-K Cmd-Y": "sublimeYank",\n      "Cmd-K Cmd-C": "showInCenter",\n      "Cmd-K Cmd-G": "clearBookmarks",\n      "Cmd-K Cmd-Backspace": "delLineLeft",\n      "Cmd-K Cmd-1": "foldAll",\n      "Cmd-K Cmd-0": "unfoldAll",\n      "Cmd-K Cmd-J": "unfoldAll",\n      "Ctrl-Shift-Up": "addCursorToPrevLine",\n      "Ctrl-Shift-Down": "addCursorToNextLine",\n      "Cmd-F3": "findUnder",\n      "Shift-Cmd-F3": "findUnderPrevious",\n      "Alt-F3": "findAllUnder",\n      "Shift-Cmd-[": "fold",\n      "Shift-Cmd-]": "unfold",\n      "Cmd-I": "findIncremental",\n      "Shift-Cmd-I": "findIncrementalReverse",\n      "Cmd-H": "replace",\n      "F3": "findNext",\n      "Shift-F3": "findPrev",\n      "fallthrough": "macDefault"\n    };\n    CodeMirror.normalizeKeyMap(keyMap.macSublime);\n    keyMap.pcSublime = {\n      "Shift-Tab": "indentLess",\n      "Shift-Ctrl-K": "deleteLine",\n      "Alt-Q": "wrapLines",\n      "Ctrl-T": "transposeChars",\n      "Alt-Left": "goSubwordLeft",\n      "Alt-Right": "goSubwordRight",\n      "Ctrl-Up": "scrollLineUp",\n      "Ctrl-Down": "scrollLineDown",\n      "Ctrl-L": "selectLine",\n      "Shift-Ctrl-L": "splitSelectionByLine",\n      "Esc": "singleSelectionTop",\n      "Ctrl-Enter": "insertLineAfter",\n      "Shift-Ctrl-Enter": "insertLineBefore",\n      "Ctrl-D": "selectNextOccurrence",\n      "Shift-Ctrl-Space": "selectScope",\n      "Shift-Ctrl-M": "selectBetweenBrackets",\n      "Ctrl-M": "goToBracket",\n      "Shift-Ctrl-Up": "swapLineUp",\n      "Shift-Ctrl-Down": "swapLineDown",\n      "Ctrl-/": "toggleCommentIndented",\n      "Ctrl-J": "joinLines",\n      "Shift-Ctrl-D": "duplicateLine",\n      "F9": "sortLines",\n      "Shift-F9": "reverseSortLines",\n      "Ctrl-F9": "sortLinesInsensitive",\n      "Shift-Ctrl-F9": "reverseSortLinesInsensitive",\n      "F2": "nextBookmark",\n      "Shift-F2": "prevBookmark",\n      "Ctrl-F2": "toggleBookmark",\n      "Shift-Ctrl-F2": "clearBookmarks",\n      "Alt-F2": "selectBookmarks",\n      "Backspace": "smartBackspace",\n      "Ctrl-K Ctrl-D": "skipAndSelectNextOccurrence",\n      "Ctrl-K Ctrl-K": "delLineRight",\n      "Ctrl-K Ctrl-U": "upcaseAtCursor",\n      "Ctrl-K Ctrl-L": "downcaseAtCursor",\n      "Ctrl-K Ctrl-Space": "setSublimeMark",\n      "Ctrl-K Ctrl-A": "selectToSublimeMark",\n      "Ctrl-K Ctrl-W": "deleteToSublimeMark",\n      "Ctrl-K Ctrl-X": "swapWithSublimeMark",\n      "Ctrl-K Ctrl-Y": "sublimeYank",\n      "Ctrl-K Ctrl-C": "showInCenter",\n      "Ctrl-K Ctrl-G": "clearBookmarks",\n      "Ctrl-K Ctrl-Backspace": "delLineLeft",\n      "Ctrl-K Ctrl-1": "foldAll",\n      "Ctrl-K Ctrl-0": "unfoldAll",\n      "Ctrl-K Ctrl-J": "unfoldAll",\n      "Ctrl-Alt-Up": "addCursorToPrevLine",\n      "Ctrl-Alt-Down": "addCursorToNextLine",\n      "Ctrl-F3": "findUnder",\n      "Shift-Ctrl-F3": "findUnderPrevious",\n      "Alt-F3": "findAllUnder",\n      "Shift-Ctrl-[": "fold",\n      "Shift-Ctrl-]": "unfold",\n      "Ctrl-I": "findIncremental",\n      "Shift-Ctrl-I": "findIncrementalReverse",\n      "Ctrl-H": "replace",\n      "F3": "findNext",\n      "Shift-F3": "findPrev",\n      "fallthrough": "pcDefault"\n    };\n    CodeMirror.normalizeKeyMap(keyMap.pcSublime);\n    var mac = keyMap.default == keyMap.macDefault;\n    keyMap.sublime = mac ? keyMap.macSublime : keyMap.pcSublime;\n  });\n})();\nvar sublime = sublime$2.exports;\nvar sublime$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: "Module",\n  "default": sublime\n}, [sublime$2.exports]));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13571\n')}}]);