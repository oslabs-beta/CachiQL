"use strict";(self.webpackChunkcachiql_demo=self.webpackChunkcachiql_demo||[]).push([[573,105,744],{19744:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "a": () => (/* binding */ dialog$2),\n/* harmony export */   "d": () => (/* binding */ dialog$1)\n/* harmony export */ });\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97480);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== "string" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== "default" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, "_mergeNamespaces");\nvar dialog$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports);\n  })(function(CodeMirror) {\n    function dialogDiv(cm, template, bottom) {\n      var wrap = cm.getWrapperElement();\n      var dialog2;\n      dialog2 = wrap.appendChild(document.createElement("div"));\n      if (bottom)\n        dialog2.className = "CodeMirror-dialog CodeMirror-dialog-bottom";\n      else\n        dialog2.className = "CodeMirror-dialog CodeMirror-dialog-top";\n      if (typeof template == "string") {\n        dialog2.innerHTML = template;\n      } else {\n        dialog2.appendChild(template);\n      }\n      CodeMirror.addClass(wrap, "dialog-opened");\n      return dialog2;\n    }\n    __name(dialogDiv, "dialogDiv");\n    function closeNotification(cm, newVal) {\n      if (cm.state.currentNotificationClose)\n        cm.state.currentNotificationClose();\n      cm.state.currentNotificationClose = newVal;\n    }\n    __name(closeNotification, "closeNotification");\n    CodeMirror.defineExtension("openDialog", function(template, callback, options) {\n      if (!options)\n        options = {};\n      closeNotification(this, null);\n      var dialog2 = dialogDiv(this, template, options.bottom);\n      var closed = false, me = this;\n      function close(newVal) {\n        if (typeof newVal == "string") {\n          inp.value = newVal;\n        } else {\n          if (closed)\n            return;\n          closed = true;\n          CodeMirror.rmClass(dialog2.parentNode, "dialog-opened");\n          dialog2.parentNode.removeChild(dialog2);\n          me.focus();\n          if (options.onClose)\n            options.onClose(dialog2);\n        }\n      }\n      __name(close, "close");\n      var inp = dialog2.getElementsByTagName("input")[0], button;\n      if (inp) {\n        inp.focus();\n        if (options.value) {\n          inp.value = options.value;\n          if (options.selectValueOnOpen !== false) {\n            inp.select();\n          }\n        }\n        if (options.onInput)\n          CodeMirror.on(inp, "input", function(e) {\n            options.onInput(e, inp.value, close);\n          });\n        if (options.onKeyUp)\n          CodeMirror.on(inp, "keyup", function(e) {\n            options.onKeyUp(e, inp.value, close);\n          });\n        CodeMirror.on(inp, "keydown", function(e) {\n          if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) {\n            return;\n          }\n          if (e.keyCode == 27 || options.closeOnEnter !== false && e.keyCode == 13) {\n            inp.blur();\n            CodeMirror.e_stop(e);\n            close();\n          }\n          if (e.keyCode == 13)\n            callback(inp.value, e);\n        });\n        if (options.closeOnBlur !== false)\n          CodeMirror.on(dialog2, "focusout", function(evt) {\n            if (evt.relatedTarget !== null)\n              close();\n          });\n      } else if (button = dialog2.getElementsByTagName("button")[0]) {\n        CodeMirror.on(button, "click", function() {\n          close();\n          me.focus();\n        });\n        if (options.closeOnBlur !== false)\n          CodeMirror.on(button, "blur", close);\n        button.focus();\n      }\n      return close;\n    });\n    CodeMirror.defineExtension("openConfirm", function(template, callbacks, options) {\n      closeNotification(this, null);\n      var dialog2 = dialogDiv(this, template, options && options.bottom);\n      var buttons = dialog2.getElementsByTagName("button");\n      var closed = false, me = this, blurring = 1;\n      function close() {\n        if (closed)\n          return;\n        closed = true;\n        CodeMirror.rmClass(dialog2.parentNode, "dialog-opened");\n        dialog2.parentNode.removeChild(dialog2);\n        me.focus();\n      }\n      __name(close, "close");\n      buttons[0].focus();\n      for (var i = 0; i < buttons.length; ++i) {\n        var b = buttons[i];\n        (function(callback) {\n          CodeMirror.on(b, "click", function(e) {\n            CodeMirror.e_preventDefault(e);\n            close();\n            if (callback)\n              callback(me);\n          });\n        })(callbacks[i]);\n        CodeMirror.on(b, "blur", function() {\n          --blurring;\n          setTimeout(function() {\n            if (blurring <= 0)\n              close();\n          }, 200);\n        });\n        CodeMirror.on(b, "focus", function() {\n          ++blurring;\n        });\n      }\n    });\n    CodeMirror.defineExtension("openNotification", function(template, options) {\n      closeNotification(this, close);\n      var dialog2 = dialogDiv(this, template, options && options.bottom);\n      var closed = false, doneTimer;\n      var duration = options && typeof options.duration !== "undefined" ? options.duration : 5e3;\n      function close() {\n        if (closed)\n          return;\n        closed = true;\n        clearTimeout(doneTimer);\n        CodeMirror.rmClass(dialog2.parentNode, "dialog-opened");\n        dialog2.parentNode.removeChild(dialog2);\n      }\n      __name(close, "close");\n      CodeMirror.on(dialog2, "click", function(e) {\n        CodeMirror.e_preventDefault(e);\n        close();\n      });\n      if (duration)\n        doneTimer = setTimeout(close, duration);\n      return close;\n    });\n  });\n})();\nvar dialog = dialog$2.exports;\nvar dialog$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: "Module",\n  "default": dialog\n}, [dialog$2.exports]));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk3NDQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQSw0REFBNEQsMkJBQTJCO0FBQ2xDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLFFBQVEsd0RBQWtCO0FBQzFCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG9CQUFvQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ3VDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FjaGlxbC1kZW1vLy4vbm9kZV9tb2R1bGVzL0BncmFwaGlxbC9yZWFjdC9kaXN0L2RpYWxvZy5lcy5qcz84Yjk5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19uYW1lID0gKHRhcmdldCwgdmFsdWUpID0+IF9fZGVmUHJvcCh0YXJnZXQsIFwibmFtZVwiLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG5pbXBvcnQgeyBhIGFzIGNvZGVtaXJyb3IgfSBmcm9tIFwiLi9jb2RlbWlycm9yLmVzLmpzXCI7XG5mdW5jdGlvbiBfbWVyZ2VOYW1lc3BhY2VzKG4sIG0pIHtcbiAgbS5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcbiAgICBlICYmIHR5cGVvZiBlICE9PSBcInN0cmluZ1wiICYmICFBcnJheS5pc0FycmF5KGUpICYmIE9iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24oaykge1xuICAgICAgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmICEoayBpbiBuKSkge1xuICAgICAgICB2YXIgZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgayk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBrLCBkLmdldCA/IGQgOiB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGVba107XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBPYmplY3QuZnJlZXplKG4pO1xufVxuX19uYW1lKF9tZXJnZU5hbWVzcGFjZXMsIFwiX21lcmdlTmFtZXNwYWNlc1wiKTtcbnZhciBkaWFsb2ckMiA9IHsgZXhwb3J0czoge30gfTtcbihmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcbiAgKGZ1bmN0aW9uKG1vZCkge1xuICAgIG1vZChjb2RlbWlycm9yLmV4cG9ydHMpO1xuICB9KShmdW5jdGlvbihDb2RlTWlycm9yKSB7XG4gICAgZnVuY3Rpb24gZGlhbG9nRGl2KGNtLCB0ZW1wbGF0ZSwgYm90dG9tKSB7XG4gICAgICB2YXIgd3JhcCA9IGNtLmdldFdyYXBwZXJFbGVtZW50KCk7XG4gICAgICB2YXIgZGlhbG9nMjtcbiAgICAgIGRpYWxvZzIgPSB3cmFwLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO1xuICAgICAgaWYgKGJvdHRvbSlcbiAgICAgICAgZGlhbG9nMi5jbGFzc05hbWUgPSBcIkNvZGVNaXJyb3ItZGlhbG9nIENvZGVNaXJyb3ItZGlhbG9nLWJvdHRvbVwiO1xuICAgICAgZWxzZVxuICAgICAgICBkaWFsb2cyLmNsYXNzTmFtZSA9IFwiQ29kZU1pcnJvci1kaWFsb2cgQ29kZU1pcnJvci1kaWFsb2ctdG9wXCI7XG4gICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZGlhbG9nMi5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpYWxvZzIuYXBwZW5kQ2hpbGQodGVtcGxhdGUpO1xuICAgICAgfVxuICAgICAgQ29kZU1pcnJvci5hZGRDbGFzcyh3cmFwLCBcImRpYWxvZy1vcGVuZWRcIik7XG4gICAgICByZXR1cm4gZGlhbG9nMjtcbiAgICB9XG4gICAgX19uYW1lKGRpYWxvZ0RpdiwgXCJkaWFsb2dEaXZcIik7XG4gICAgZnVuY3Rpb24gY2xvc2VOb3RpZmljYXRpb24oY20sIG5ld1ZhbCkge1xuICAgICAgaWYgKGNtLnN0YXRlLmN1cnJlbnROb3RpZmljYXRpb25DbG9zZSlcbiAgICAgICAgY20uc3RhdGUuY3VycmVudE5vdGlmaWNhdGlvbkNsb3NlKCk7XG4gICAgICBjbS5zdGF0ZS5jdXJyZW50Tm90aWZpY2F0aW9uQ2xvc2UgPSBuZXdWYWw7XG4gICAgfVxuICAgIF9fbmFtZShjbG9zZU5vdGlmaWNhdGlvbiwgXCJjbG9zZU5vdGlmaWNhdGlvblwiKTtcbiAgICBDb2RlTWlycm9yLmRlZmluZUV4dGVuc2lvbihcIm9wZW5EaWFsb2dcIiwgZnVuY3Rpb24odGVtcGxhdGUsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICBpZiAoIW9wdGlvbnMpXG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIGNsb3NlTm90aWZpY2F0aW9uKHRoaXMsIG51bGwpO1xuICAgICAgdmFyIGRpYWxvZzIgPSBkaWFsb2dEaXYodGhpcywgdGVtcGxhdGUsIG9wdGlvbnMuYm90dG9tKTtcbiAgICAgIHZhciBjbG9zZWQgPSBmYWxzZSwgbWUgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gY2xvc2UobmV3VmFsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3VmFsID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBpbnAudmFsdWUgPSBuZXdWYWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNsb3NlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICBjbG9zZWQgPSB0cnVlO1xuICAgICAgICAgIENvZGVNaXJyb3Iucm1DbGFzcyhkaWFsb2cyLnBhcmVudE5vZGUsIFwiZGlhbG9nLW9wZW5lZFwiKTtcbiAgICAgICAgICBkaWFsb2cyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZGlhbG9nMik7XG4gICAgICAgICAgbWUuZm9jdXMoKTtcbiAgICAgICAgICBpZiAob3B0aW9ucy5vbkNsb3NlKVxuICAgICAgICAgICAgb3B0aW9ucy5vbkNsb3NlKGRpYWxvZzIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfX25hbWUoY2xvc2UsIFwiY2xvc2VcIik7XG4gICAgICB2YXIgaW5wID0gZGlhbG9nMi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpWzBdLCBidXR0b247XG4gICAgICBpZiAoaW5wKSB7XG4gICAgICAgIGlucC5mb2N1cygpO1xuICAgICAgICBpZiAob3B0aW9ucy52YWx1ZSkge1xuICAgICAgICAgIGlucC52YWx1ZSA9IG9wdGlvbnMudmFsdWU7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuc2VsZWN0VmFsdWVPbk9wZW4gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpbnAuc2VsZWN0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm9uSW5wdXQpXG4gICAgICAgICAgQ29kZU1pcnJvci5vbihpbnAsIFwiaW5wdXRcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5vbklucHV0KGUsIGlucC52YWx1ZSwgY2xvc2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgICBpZiAob3B0aW9ucy5vbktleVVwKVxuICAgICAgICAgIENvZGVNaXJyb3Iub24oaW5wLCBcImtleXVwXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMub25LZXlVcChlLCBpbnAudmFsdWUsIGNsb3NlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgQ29kZU1pcnJvci5vbihpbnAsIFwia2V5ZG93blwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5vbktleURvd24gJiYgb3B0aW9ucy5vbktleURvd24oZSwgaW5wLnZhbHVlLCBjbG9zZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAyNyB8fCBvcHRpb25zLmNsb3NlT25FbnRlciAhPT0gZmFsc2UgJiYgZS5rZXlDb2RlID09IDEzKSB7XG4gICAgICAgICAgICBpbnAuYmx1cigpO1xuICAgICAgICAgICAgQ29kZU1pcnJvci5lX3N0b3AoZSk7XG4gICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZS5rZXlDb2RlID09IDEzKVxuICAgICAgICAgICAgY2FsbGJhY2soaW5wLnZhbHVlLCBlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvcHRpb25zLmNsb3NlT25CbHVyICE9PSBmYWxzZSlcbiAgICAgICAgICBDb2RlTWlycm9yLm9uKGRpYWxvZzIsIFwiZm9jdXNvdXRcIiwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICBpZiAoZXZ0LnJlbGF0ZWRUYXJnZXQgIT09IG51bGwpXG4gICAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGJ1dHRvbiA9IGRpYWxvZzIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJidXR0b25cIilbMF0pIHtcbiAgICAgICAgQ29kZU1pcnJvci5vbihidXR0b24sIFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICBtZS5mb2N1cygpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG9wdGlvbnMuY2xvc2VPbkJsdXIgIT09IGZhbHNlKVxuICAgICAgICAgIENvZGVNaXJyb3Iub24oYnV0dG9uLCBcImJsdXJcIiwgY2xvc2UpO1xuICAgICAgICBidXR0b24uZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjbG9zZTtcbiAgICB9KTtcbiAgICBDb2RlTWlycm9yLmRlZmluZUV4dGVuc2lvbihcIm9wZW5Db25maXJtXCIsIGZ1bmN0aW9uKHRlbXBsYXRlLCBjYWxsYmFja3MsIG9wdGlvbnMpIHtcbiAgICAgIGNsb3NlTm90aWZpY2F0aW9uKHRoaXMsIG51bGwpO1xuICAgICAgdmFyIGRpYWxvZzIgPSBkaWFsb2dEaXYodGhpcywgdGVtcGxhdGUsIG9wdGlvbnMgJiYgb3B0aW9ucy5ib3R0b20pO1xuICAgICAgdmFyIGJ1dHRvbnMgPSBkaWFsb2cyLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYnV0dG9uXCIpO1xuICAgICAgdmFyIGNsb3NlZCA9IGZhbHNlLCBtZSA9IHRoaXMsIGJsdXJyaW5nID0gMTtcbiAgICAgIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICBpZiAoY2xvc2VkKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgQ29kZU1pcnJvci5ybUNsYXNzKGRpYWxvZzIucGFyZW50Tm9kZSwgXCJkaWFsb2ctb3BlbmVkXCIpO1xuICAgICAgICBkaWFsb2cyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZGlhbG9nMik7XG4gICAgICAgIG1lLmZvY3VzKCk7XG4gICAgICB9XG4gICAgICBfX25hbWUoY2xvc2UsIFwiY2xvc2VcIik7XG4gICAgICBidXR0b25zWzBdLmZvY3VzKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1dHRvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGIgPSBidXR0b25zW2ldO1xuICAgICAgICAoZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICBDb2RlTWlycm9yLm9uKGIsIFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgQ29kZU1pcnJvci5lX3ByZXZlbnREZWZhdWx0KGUpO1xuICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaylcbiAgICAgICAgICAgICAgY2FsbGJhY2sobWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KShjYWxsYmFja3NbaV0pO1xuICAgICAgICBDb2RlTWlycm9yLm9uKGIsIFwiYmx1clwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAtLWJsdXJyaW5nO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoYmx1cnJpbmcgPD0gMClcbiAgICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICB9LCAyMDApO1xuICAgICAgICB9KTtcbiAgICAgICAgQ29kZU1pcnJvci5vbihiLCBcImZvY3VzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICsrYmx1cnJpbmc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIENvZGVNaXJyb3IuZGVmaW5lRXh0ZW5zaW9uKFwib3Blbk5vdGlmaWNhdGlvblwiLCBmdW5jdGlvbih0ZW1wbGF0ZSwgb3B0aW9ucykge1xuICAgICAgY2xvc2VOb3RpZmljYXRpb24odGhpcywgY2xvc2UpO1xuICAgICAgdmFyIGRpYWxvZzIgPSBkaWFsb2dEaXYodGhpcywgdGVtcGxhdGUsIG9wdGlvbnMgJiYgb3B0aW9ucy5ib3R0b20pO1xuICAgICAgdmFyIGNsb3NlZCA9IGZhbHNlLCBkb25lVGltZXI7XG4gICAgICB2YXIgZHVyYXRpb24gPSBvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLmR1cmF0aW9uICE9PSBcInVuZGVmaW5lZFwiID8gb3B0aW9ucy5kdXJhdGlvbiA6IDVlMztcbiAgICAgIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICBpZiAoY2xvc2VkKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGRvbmVUaW1lcik7XG4gICAgICAgIENvZGVNaXJyb3Iucm1DbGFzcyhkaWFsb2cyLnBhcmVudE5vZGUsIFwiZGlhbG9nLW9wZW5lZFwiKTtcbiAgICAgICAgZGlhbG9nMi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRpYWxvZzIpO1xuICAgICAgfVxuICAgICAgX19uYW1lKGNsb3NlLCBcImNsb3NlXCIpO1xuICAgICAgQ29kZU1pcnJvci5vbihkaWFsb2cyLCBcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgQ29kZU1pcnJvci5lX3ByZXZlbnREZWZhdWx0KGUpO1xuICAgICAgICBjbG9zZSgpO1xuICAgICAgfSk7XG4gICAgICBpZiAoZHVyYXRpb24pXG4gICAgICAgIGRvbmVUaW1lciA9IHNldFRpbWVvdXQoY2xvc2UsIGR1cmF0aW9uKTtcbiAgICAgIHJldHVybiBjbG9zZTtcbiAgICB9KTtcbiAgfSk7XG59KSgpO1xudmFyIGRpYWxvZyA9IGRpYWxvZyQyLmV4cG9ydHM7XG52YXIgZGlhbG9nJDEgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmZyZWV6ZSgvKiBAX19QVVJFX18gKi8gX21lcmdlTmFtZXNwYWNlcyh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgW1N5bWJvbC50b1N0cmluZ1RhZ106IFwiTW9kdWxlXCIsXG4gIFwiZGVmYXVsdFwiOiBkaWFsb2dcbn0sIFtkaWFsb2ckMi5leHBvcnRzXSkpO1xuZXhwb3J0IHsgZGlhbG9nJDIgYXMgYSwgZGlhbG9nJDEgYXMgZCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19744\n')},32573:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "s": () => (/* binding */ search$1)\n/* harmony export */ });\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97480);\n/* harmony import */ var _searchcursor_es_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26105);\n/* harmony import */ var _dialog_es_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19744);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\n\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== "string" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== "default" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, "_mergeNamespaces");\nvar search$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports, _searchcursor_es_js__WEBPACK_IMPORTED_MODULE_1__.a.exports, _dialog_es_js__WEBPACK_IMPORTED_MODULE_2__.a.exports);\n  })(function(CodeMirror) {\n    CodeMirror.defineOption("search", { bottom: false });\n    function searchOverlay(query, caseInsensitive) {\n      if (typeof query == "string")\n        query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, "\\\\$&"), caseInsensitive ? "gi" : "g");\n      else if (!query.global)\n        query = new RegExp(query.source, query.ignoreCase ? "gi" : "g");\n      return { token: function(stream) {\n        query.lastIndex = stream.pos;\n        var match = query.exec(stream.string);\n        if (match && match.index == stream.pos) {\n          stream.pos += match[0].length || 1;\n          return "searching";\n        } else if (match) {\n          stream.pos = match.index;\n        } else {\n          stream.skipToEnd();\n        }\n      } };\n    }\n    __name(searchOverlay, "searchOverlay");\n    function SearchState() {\n      this.posFrom = this.posTo = this.lastQuery = this.query = null;\n      this.overlay = null;\n    }\n    __name(SearchState, "SearchState");\n    function getSearchState(cm) {\n      return cm.state.search || (cm.state.search = new SearchState());\n    }\n    __name(getSearchState, "getSearchState");\n    function queryCaseInsensitive(query) {\n      return typeof query == "string" && query == query.toLowerCase();\n    }\n    __name(queryCaseInsensitive, "queryCaseInsensitive");\n    function getSearchCursor(cm, query, pos) {\n      return cm.getSearchCursor(query, pos, { caseFold: queryCaseInsensitive(query), multiline: true });\n    }\n    __name(getSearchCursor, "getSearchCursor");\n    function persistentDialog(cm, text, deflt, onEnter, onKeyDown) {\n      cm.openDialog(text, onEnter, {\n        value: deflt,\n        selectValueOnOpen: true,\n        closeOnEnter: false,\n        onClose: function() {\n          clearSearch(cm);\n        },\n        onKeyDown,\n        bottom: cm.options.search.bottom\n      });\n    }\n    __name(persistentDialog, "persistentDialog");\n    function dialog2(cm, text, shortText, deflt, f) {\n      if (cm.openDialog)\n        cm.openDialog(text, f, { value: deflt, selectValueOnOpen: true, bottom: cm.options.search.bottom });\n      else\n        f(prompt(shortText, deflt));\n    }\n    __name(dialog2, "dialog");\n    function confirmDialog(cm, text, shortText, fs) {\n      if (cm.openConfirm)\n        cm.openConfirm(text, fs);\n      else if (confirm(shortText))\n        fs[0]();\n    }\n    __name(confirmDialog, "confirmDialog");\n    function parseString(string) {\n      return string.replace(/\\\\([nrt\\\\])/g, function(match, ch) {\n        if (ch == "n")\n          return "\\n";\n        if (ch == "r")\n          return "\\r";\n        if (ch == "t")\n          return "\t";\n        if (ch == "\\\\")\n          return "\\\\";\n        return match;\n      });\n    }\n    __name(parseString, "parseString");\n    function parseQuery(query) {\n      var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\n      if (isRE) {\n        try {\n          query = new RegExp(isRE[1], isRE[2].indexOf("i") == -1 ? "" : "i");\n        } catch (e) {\n        }\n      } else {\n        query = parseString(query);\n      }\n      if (typeof query == "string" ? query == "" : query.test(""))\n        query = /x^/;\n      return query;\n    }\n    __name(parseQuery, "parseQuery");\n    function startSearch(cm, state, query) {\n      state.queryText = query;\n      state.query = parseQuery(query);\n      cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\n      state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\n      cm.addOverlay(state.overlay);\n      if (cm.showMatchesOnScrollbar) {\n        if (state.annotate) {\n          state.annotate.clear();\n          state.annotate = null;\n        }\n        state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\n      }\n    }\n    __name(startSearch, "startSearch");\n    function doSearch(cm, rev, persistent, immediate) {\n      var state = getSearchState(cm);\n      if (state.query)\n        return findNext(cm, rev);\n      var q = cm.getSelection() || state.lastQuery;\n      if (q instanceof RegExp && q.source == "x^")\n        q = null;\n      if (persistent && cm.openDialog) {\n        var hiding = null;\n        var searchNext = /* @__PURE__ */ __name(function(query, event) {\n          CodeMirror.e_stop(event);\n          if (!query)\n            return;\n          if (query != state.queryText) {\n            startSearch(cm, state, query);\n            state.posFrom = state.posTo = cm.getCursor();\n          }\n          if (hiding)\n            hiding.style.opacity = 1;\n          findNext(cm, event.shiftKey, function(_, to) {\n            var dialog3;\n            if (to.line < 3 && document.querySelector && (dialog3 = cm.display.wrapper.querySelector(".CodeMirror-dialog")) && dialog3.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, "window").top)\n              (hiding = dialog3).style.opacity = 0.4;\n          });\n        }, "searchNext");\n        persistentDialog(cm, getQueryDialog(cm), q, searchNext, function(event, query) {\n          var keyName = CodeMirror.keyName(event);\n          var extra = cm.getOption("extraKeys"), cmd = extra && extra[keyName] || CodeMirror.keyMap[cm.getOption("keyMap")][keyName];\n          if (cmd == "findNext" || cmd == "findPrev" || cmd == "findPersistentNext" || cmd == "findPersistentPrev") {\n            CodeMirror.e_stop(event);\n            startSearch(cm, getSearchState(cm), query);\n            cm.execCommand(cmd);\n          } else if (cmd == "find" || cmd == "findPersistent") {\n            CodeMirror.e_stop(event);\n            searchNext(query, event);\n          }\n        });\n        if (immediate && q) {\n          startSearch(cm, state, q);\n          findNext(cm, rev);\n        }\n      } else {\n        dialog2(cm, getQueryDialog(cm), "Search for:", q, function(query) {\n          if (query && !state.query)\n            cm.operation(function() {\n              startSearch(cm, state, query);\n              state.posFrom = state.posTo = cm.getCursor();\n              findNext(cm, rev);\n            });\n        });\n      }\n    }\n    __name(doSearch, "doSearch");\n    function findNext(cm, rev, callback) {\n      cm.operation(function() {\n        var state = getSearchState(cm);\n        var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\n        if (!cursor.find(rev)) {\n          cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\n          if (!cursor.find(rev))\n            return;\n        }\n        cm.setSelection(cursor.from(), cursor.to());\n        cm.scrollIntoView({ from: cursor.from(), to: cursor.to() }, 20);\n        state.posFrom = cursor.from();\n        state.posTo = cursor.to();\n        if (callback)\n          callback(cursor.from(), cursor.to());\n      });\n    }\n    __name(findNext, "findNext");\n    function clearSearch(cm) {\n      cm.operation(function() {\n        var state = getSearchState(cm);\n        state.lastQuery = state.query;\n        if (!state.query)\n          return;\n        state.query = state.queryText = null;\n        cm.removeOverlay(state.overlay);\n        if (state.annotate) {\n          state.annotate.clear();\n          state.annotate = null;\n        }\n      });\n    }\n    __name(clearSearch, "clearSearch");\n    function el(tag, attrs) {\n      var element = tag ? document.createElement(tag) : document.createDocumentFragment();\n      for (var key in attrs) {\n        element[key] = attrs[key];\n      }\n      for (var i = 2; i < arguments.length; i++) {\n        var child = arguments[i];\n        element.appendChild(typeof child == "string" ? document.createTextNode(child) : child);\n      }\n      return element;\n    }\n    __name(el, "el");\n    function getQueryDialog(cm) {\n      return el("", null, el("span", { className: "CodeMirror-search-label" }, cm.phrase("Search:")), " ", el("input", { type: "text", "style": "width: 10em", className: "CodeMirror-search-field" }), " ", el("span", { style: "color: #888", className: "CodeMirror-search-hint" }, cm.phrase("(Use /re/ syntax for regexp search)")));\n    }\n    __name(getQueryDialog, "getQueryDialog");\n    function getReplaceQueryDialog(cm) {\n      return el("", null, " ", el("input", { type: "text", "style": "width: 10em", className: "CodeMirror-search-field" }), " ", el("span", { style: "color: #888", className: "CodeMirror-search-hint" }, cm.phrase("(Use /re/ syntax for regexp search)")));\n    }\n    __name(getReplaceQueryDialog, "getReplaceQueryDialog");\n    function getReplacementQueryDialog(cm) {\n      return el("", null, el("span", { className: "CodeMirror-search-label" }, cm.phrase("With:")), " ", el("input", { type: "text", "style": "width: 10em", className: "CodeMirror-search-field" }));\n    }\n    __name(getReplacementQueryDialog, "getReplacementQueryDialog");\n    function getDoReplaceConfirm(cm) {\n      return el("", null, el("span", { className: "CodeMirror-search-label" }, cm.phrase("Replace?")), " ", el("button", {}, cm.phrase("Yes")), " ", el("button", {}, cm.phrase("No")), " ", el("button", {}, cm.phrase("All")), " ", el("button", {}, cm.phrase("Stop")));\n    }\n    __name(getDoReplaceConfirm, "getDoReplaceConfirm");\n    function replaceAll(cm, query, text) {\n      cm.operation(function() {\n        for (var cursor = getSearchCursor(cm, query); cursor.findNext(); ) {\n          if (typeof query != "string") {\n            var match = cm.getRange(cursor.from(), cursor.to()).match(query);\n            cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {\n              return match[i];\n            }));\n          } else\n            cursor.replace(text);\n        }\n      });\n    }\n    __name(replaceAll, "replaceAll");\n    function replace(cm, all) {\n      if (cm.getOption("readOnly"))\n        return;\n      var query = cm.getSelection() || getSearchState(cm).lastQuery;\n      var dialogText = all ? cm.phrase("Replace all:") : cm.phrase("Replace:");\n      var fragment = el("", null, el("span", { className: "CodeMirror-search-label" }, dialogText), getReplaceQueryDialog(cm));\n      dialog2(cm, fragment, dialogText, query, function(query2) {\n        if (!query2)\n          return;\n        query2 = parseQuery(query2);\n        dialog2(cm, getReplacementQueryDialog(cm), cm.phrase("Replace with:"), "", function(text) {\n          text = parseString(text);\n          if (all) {\n            replaceAll(cm, query2, text);\n          } else {\n            clearSearch(cm);\n            var cursor = getSearchCursor(cm, query2, cm.getCursor("from"));\n            var advance = /* @__PURE__ */ __name(function() {\n              var start = cursor.from(), match;\n              if (!(match = cursor.findNext())) {\n                cursor = getSearchCursor(cm, query2);\n                if (!(match = cursor.findNext()) || start && cursor.from().line == start.line && cursor.from().ch == start.ch)\n                  return;\n              }\n              cm.setSelection(cursor.from(), cursor.to());\n              cm.scrollIntoView({ from: cursor.from(), to: cursor.to() });\n              confirmDialog(cm, getDoReplaceConfirm(cm), cm.phrase("Replace?"), [\n                function() {\n                  doReplace(match);\n                },\n                advance,\n                function() {\n                  replaceAll(cm, query2, text);\n                }\n              ]);\n            }, "advance");\n            var doReplace = /* @__PURE__ */ __name(function(match) {\n              cursor.replace(typeof query2 == "string" ? text : text.replace(/\\$(\\d)/g, function(_, i) {\n                return match[i];\n              }));\n              advance();\n            }, "doReplace");\n            advance();\n          }\n        });\n      });\n    }\n    __name(replace, "replace");\n    CodeMirror.commands.find = function(cm) {\n      clearSearch(cm);\n      doSearch(cm);\n    };\n    CodeMirror.commands.findPersistent = function(cm) {\n      clearSearch(cm);\n      doSearch(cm, false, true);\n    };\n    CodeMirror.commands.findPersistentNext = function(cm) {\n      doSearch(cm, false, true, true);\n    };\n    CodeMirror.commands.findPersistentPrev = function(cm) {\n      doSearch(cm, true, true, true);\n    };\n    CodeMirror.commands.findNext = doSearch;\n    CodeMirror.commands.findPrev = function(cm) {\n      doSearch(cm, true);\n    };\n    CodeMirror.commands.clearSearch = clearSearch;\n    CodeMirror.commands.replace = replace;\n    CodeMirror.commands.replaceAll = function(cm) {\n      replace(cm, true);\n    };\n  });\n})();\nvar search = search$2.exports;\nvar search$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: "Module",\n  "default": search\n}, [search$2.exports]));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32573\n')},26105:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "a": () => (/* binding */ searchcursor$2),\n/* harmony export */   "s": () => (/* binding */ searchcursor$1)\n/* harmony export */ });\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97480);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== "string" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== "default" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, "_mergeNamespaces");\nvar searchcursor$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports);\n  })(function(CodeMirror) {\n    var Pos = CodeMirror.Pos;\n    function regexpFlags(regexp) {\n      var flags = regexp.flags;\n      return flags != null ? flags : (regexp.ignoreCase ? "i" : "") + (regexp.global ? "g" : "") + (regexp.multiline ? "m" : "");\n    }\n    __name(regexpFlags, "regexpFlags");\n    function ensureFlags(regexp, flags) {\n      var current = regexpFlags(regexp), target = current;\n      for (var i = 0; i < flags.length; i++)\n        if (target.indexOf(flags.charAt(i)) == -1)\n          target += flags.charAt(i);\n      return current == target ? regexp : new RegExp(regexp.source, target);\n    }\n    __name(ensureFlags, "ensureFlags");\n    function maybeMultiline(regexp) {\n      return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source);\n    }\n    __name(maybeMultiline, "maybeMultiline");\n    function searchRegexpForward(doc, regexp, start) {\n      regexp = ensureFlags(regexp, "g");\n      for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n        regexp.lastIndex = ch;\n        var string = doc.getLine(line), match = regexp.exec(string);\n        if (match)\n          return {\n            from: Pos(line, match.index),\n            to: Pos(line, match.index + match[0].length),\n            match\n          };\n      }\n    }\n    __name(searchRegexpForward, "searchRegexpForward");\n    function searchRegexpForwardMultiline(doc, regexp, start) {\n      if (!maybeMultiline(regexp))\n        return searchRegexpForward(doc, regexp, start);\n      regexp = ensureFlags(regexp, "gm");\n      var string, chunk = 1;\n      for (var line = start.line, last = doc.lastLine(); line <= last; ) {\n        for (var i = 0; i < chunk; i++) {\n          if (line > last)\n            break;\n          var curLine = doc.getLine(line++);\n          string = string == null ? curLine : string + "\\n" + curLine;\n        }\n        chunk = chunk * 2;\n        regexp.lastIndex = start.ch;\n        var match = regexp.exec(string);\n        if (match) {\n          var before = string.slice(0, match.index).split("\\n"), inside = match[0].split("\\n");\n          var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length;\n          return {\n            from: Pos(startLine, startCh),\n            to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n            match\n          };\n        }\n      }\n    }\n    __name(searchRegexpForwardMultiline, "searchRegexpForwardMultiline");\n    function lastMatchIn(string, regexp, endMargin) {\n      var match, from = 0;\n      while (from <= string.length) {\n        regexp.lastIndex = from;\n        var newMatch = regexp.exec(string);\n        if (!newMatch)\n          break;\n        var end = newMatch.index + newMatch[0].length;\n        if (end > string.length - endMargin)\n          break;\n        if (!match || end > match.index + match[0].length)\n          match = newMatch;\n        from = newMatch.index + 1;\n      }\n      return match;\n    }\n    __name(lastMatchIn, "lastMatchIn");\n    function searchRegexpBackward(doc, regexp, start) {\n      regexp = ensureFlags(regexp, "g");\n      for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n        var string = doc.getLine(line);\n        var match = lastMatchIn(string, regexp, ch < 0 ? 0 : string.length - ch);\n        if (match)\n          return {\n            from: Pos(line, match.index),\n            to: Pos(line, match.index + match[0].length),\n            match\n          };\n      }\n    }\n    __name(searchRegexpBackward, "searchRegexpBackward");\n    function searchRegexpBackwardMultiline(doc, regexp, start) {\n      if (!maybeMultiline(regexp))\n        return searchRegexpBackward(doc, regexp, start);\n      regexp = ensureFlags(regexp, "gm");\n      var string, chunkSize = 1, endMargin = doc.getLine(start.line).length - start.ch;\n      for (var line = start.line, first = doc.firstLine(); line >= first; ) {\n        for (var i = 0; i < chunkSize && line >= first; i++) {\n          var curLine = doc.getLine(line--);\n          string = string == null ? curLine : curLine + "\\n" + string;\n        }\n        chunkSize *= 2;\n        var match = lastMatchIn(string, regexp, endMargin);\n        if (match) {\n          var before = string.slice(0, match.index).split("\\n"), inside = match[0].split("\\n");\n          var startLine = line + before.length, startCh = before[before.length - 1].length;\n          return {\n            from: Pos(startLine, startCh),\n            to: Pos(startLine + inside.length - 1, inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n            match\n          };\n        }\n      }\n    }\n    __name(searchRegexpBackwardMultiline, "searchRegexpBackwardMultiline");\n    var doFold, noFold;\n    if (String.prototype.normalize) {\n      doFold = /* @__PURE__ */ __name(function(str) {\n        return str.normalize("NFD").toLowerCase();\n      }, "doFold");\n      noFold = /* @__PURE__ */ __name(function(str) {\n        return str.normalize("NFD");\n      }, "noFold");\n    } else {\n      doFold = /* @__PURE__ */ __name(function(str) {\n        return str.toLowerCase();\n      }, "doFold");\n      noFold = /* @__PURE__ */ __name(function(str) {\n        return str;\n      }, "noFold");\n    }\n    function adjustPos(orig, folded, pos, foldFunc) {\n      if (orig.length == folded.length)\n        return pos;\n      for (var min = 0, max = pos + Math.max(0, orig.length - folded.length); ; ) {\n        if (min == max)\n          return min;\n        var mid = min + max >> 1;\n        var len = foldFunc(orig.slice(0, mid)).length;\n        if (len == pos)\n          return mid;\n        else if (len > pos)\n          max = mid;\n        else\n          min = mid + 1;\n      }\n    }\n    __name(adjustPos, "adjustPos");\n    function searchStringForward(doc, query, start, caseFold) {\n      if (!query.length)\n        return null;\n      var fold = caseFold ? doFold : noFold;\n      var lines = fold(query).split(/\\r|\\n\\r?/);\n      search:\n        for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n          var orig = doc.getLine(line).slice(ch), string = fold(orig);\n          if (lines.length == 1) {\n            var found = string.indexOf(lines[0]);\n            if (found == -1)\n              continue search;\n            var start = adjustPos(orig, string, found, fold) + ch;\n            return {\n              from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n              to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)\n            };\n          } else {\n            var cutFrom = string.length - lines[0].length;\n            if (string.slice(cutFrom) != lines[0])\n              continue search;\n            for (var i = 1; i < lines.length - 1; i++)\n              if (fold(doc.getLine(line + i)) != lines[i])\n                continue search;\n            var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1];\n            if (endString.slice(0, lastLine.length) != lastLine)\n              continue search;\n            return {\n              from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n              to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))\n            };\n          }\n        }\n    }\n    __name(searchStringForward, "searchStringForward");\n    function searchStringBackward(doc, query, start, caseFold) {\n      if (!query.length)\n        return null;\n      var fold = caseFold ? doFold : noFold;\n      var lines = fold(query).split(/\\r|\\n\\r?/);\n      search:\n        for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n          var orig = doc.getLine(line);\n          if (ch > -1)\n            orig = orig.slice(0, ch);\n          var string = fold(orig);\n          if (lines.length == 1) {\n            var found = string.lastIndexOf(lines[0]);\n            if (found == -1)\n              continue search;\n            return {\n              from: Pos(line, adjustPos(orig, string, found, fold)),\n              to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))\n            };\n          } else {\n            var lastLine = lines[lines.length - 1];\n            if (string.slice(0, lastLine.length) != lastLine)\n              continue search;\n            for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n              if (fold(doc.getLine(start + i)) != lines[i])\n                continue search;\n            var top = doc.getLine(line + 1 - lines.length), topString = fold(top);\n            if (topString.slice(topString.length - lines[0].length) != lines[0])\n              continue search;\n            return {\n              from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n              to: Pos(line, adjustPos(orig, string, lastLine.length, fold))\n            };\n          }\n        }\n    }\n    __name(searchStringBackward, "searchStringBackward");\n    function SearchCursor(doc, query, pos, options) {\n      this.atOccurrence = false;\n      this.afterEmptyMatch = false;\n      this.doc = doc;\n      pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n      this.pos = { from: pos, to: pos };\n      var caseFold;\n      if (typeof options == "object") {\n        caseFold = options.caseFold;\n      } else {\n        caseFold = options;\n        options = null;\n      }\n      if (typeof query == "string") {\n        if (caseFold == null)\n          caseFold = false;\n        this.matches = function(reverse, pos2) {\n          return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos2, caseFold);\n        };\n      } else {\n        query = ensureFlags(query, "gm");\n        if (!options || options.multiline !== false)\n          this.matches = function(reverse, pos2) {\n            return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos2);\n          };\n        else\n          this.matches = function(reverse, pos2) {\n            return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos2);\n          };\n      }\n    }\n    __name(SearchCursor, "SearchCursor");\n    SearchCursor.prototype = {\n      findNext: function() {\n        return this.find(false);\n      },\n      findPrevious: function() {\n        return this.find(true);\n      },\n      find: function(reverse) {\n        var head = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n        if (this.afterEmptyMatch && this.atOccurrence) {\n          head = Pos(head.line, head.ch);\n          if (reverse) {\n            head.ch--;\n            if (head.ch < 0) {\n              head.line--;\n              head.ch = (this.doc.getLine(head.line) || "").length;\n            }\n          } else {\n            head.ch++;\n            if (head.ch > (this.doc.getLine(head.line) || "").length) {\n              head.ch = 0;\n              head.line++;\n            }\n          }\n          if (CodeMirror.cmpPos(head, this.doc.clipPos(head)) != 0) {\n            return this.atOccurrence = false;\n          }\n        }\n        var result = this.matches(reverse, head);\n        this.afterEmptyMatch = result && CodeMirror.cmpPos(result.from, result.to) == 0;\n        if (result) {\n          this.pos = result;\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        } else {\n          var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0);\n          this.pos = { from: end, to: end };\n          return this.atOccurrence = false;\n        }\n      },\n      from: function() {\n        if (this.atOccurrence)\n          return this.pos.from;\n      },\n      to: function() {\n        if (this.atOccurrence)\n          return this.pos.to;\n      },\n      replace: function(newText, origin) {\n        if (!this.atOccurrence)\n          return;\n        var lines = CodeMirror.splitLines(newText);\n        this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n        this.pos.to = Pos(this.pos.from.line + lines.length - 1, lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n      }\n    };\n    CodeMirror.defineExtension("getSearchCursor", function(query, pos, caseFold) {\n      return new SearchCursor(this.doc, query, pos, caseFold);\n    });\n    CodeMirror.defineDocExtension("getSearchCursor", function(query, pos, caseFold) {\n      return new SearchCursor(this, query, pos, caseFold);\n    });\n    CodeMirror.defineExtension("selectMatches", function(query, caseFold) {\n      var ranges = [];\n      var cur = this.getSearchCursor(query, this.getCursor("from"), caseFold);\n      while (cur.findNext()) {\n        if (CodeMirror.cmpPos(cur.to(), this.getCursor("to")) > 0)\n          break;\n        ranges.push({ anchor: cur.from(), head: cur.to() });\n      }\n      if (ranges.length)\n        this.setSelections(ranges, 0);\n    });\n  });\n})();\nvar searchcursor = searchcursor$2.exports;\nvar searchcursor$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: "Module",\n  "default": searchcursor\n}, [searchcursor$2.exports]));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26105\n')}}]);