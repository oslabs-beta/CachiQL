"use strict";(self.webpackChunkcachiql_demo=self.webpackChunkcachiql_demo||[]).push([[739],{55739:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "f": () => (/* binding */ foldgutter$1)\n/* harmony export */ });\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97480);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== "string" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== "default" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, "_mergeNamespaces");\nvar foldgutter$2 = { exports: {} };\nvar foldcode = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports);\n  })(function(CodeMirror) {\n    function doFold(cm, pos, options, force) {\n      if (options && options.call) {\n        var finder = options;\n        options = null;\n      } else {\n        var finder = getOption(cm, options, "rangeFinder");\n      }\n      if (typeof pos == "number")\n        pos = CodeMirror.Pos(pos, 0);\n      var minSize = getOption(cm, options, "minFoldSize");\n      function getRange(allowFolded) {\n        var range2 = finder(cm, pos);\n        if (!range2 || range2.to.line - range2.from.line < minSize)\n          return null;\n        if (force === "fold")\n          return range2;\n        var marks = cm.findMarksAt(range2.from);\n        for (var i = 0; i < marks.length; ++i) {\n          if (marks[i].__isFold) {\n            if (!allowFolded)\n              return null;\n            range2.cleared = true;\n            marks[i].clear();\n          }\n        }\n        return range2;\n      }\n      __name(getRange, "getRange");\n      var range = getRange(true);\n      if (getOption(cm, options, "scanUp"))\n        while (!range && pos.line > cm.firstLine()) {\n          pos = CodeMirror.Pos(pos.line - 1, 0);\n          range = getRange(false);\n        }\n      if (!range || range.cleared || force === "unfold")\n        return;\n      var myWidget = makeWidget(cm, options, range);\n      CodeMirror.on(myWidget, "mousedown", function(e) {\n        myRange.clear();\n        CodeMirror.e_preventDefault(e);\n      });\n      var myRange = cm.markText(range.from, range.to, {\n        replacedWith: myWidget,\n        clearOnEnter: getOption(cm, options, "clearOnEnter"),\n        __isFold: true\n      });\n      myRange.on("clear", function(from, to) {\n        CodeMirror.signal(cm, "unfold", cm, from, to);\n      });\n      CodeMirror.signal(cm, "fold", cm, range.from, range.to);\n    }\n    __name(doFold, "doFold");\n    function makeWidget(cm, options, range) {\n      var widget = getOption(cm, options, "widget");\n      if (typeof widget == "function") {\n        widget = widget(range.from, range.to);\n      }\n      if (typeof widget == "string") {\n        var text = document.createTextNode(widget);\n        widget = document.createElement("span");\n        widget.appendChild(text);\n        widget.className = "CodeMirror-foldmarker";\n      } else if (widget) {\n        widget = widget.cloneNode(true);\n      }\n      return widget;\n    }\n    __name(makeWidget, "makeWidget");\n    CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n      return function(cm, pos) {\n        doFold(cm, pos, { rangeFinder, widget });\n      };\n    };\n    CodeMirror.defineExtension("foldCode", function(pos, options, force) {\n      doFold(this, pos, options, force);\n    });\n    CodeMirror.defineExtension("isFolded", function(pos) {\n      var marks = this.findMarksAt(pos);\n      for (var i = 0; i < marks.length; ++i)\n        if (marks[i].__isFold)\n          return true;\n    });\n    CodeMirror.commands.toggleFold = function(cm) {\n      cm.foldCode(cm.getCursor());\n    };\n    CodeMirror.commands.fold = function(cm) {\n      cm.foldCode(cm.getCursor(), null, "fold");\n    };\n    CodeMirror.commands.unfold = function(cm) {\n      cm.foldCode(cm.getCursor(), { scanUp: false }, "unfold");\n    };\n    CodeMirror.commands.foldAll = function(cm) {\n      cm.operation(function() {\n        for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n          cm.foldCode(CodeMirror.Pos(i, 0), { scanUp: false }, "fold");\n      });\n    };\n    CodeMirror.commands.unfoldAll = function(cm) {\n      cm.operation(function() {\n        for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n          cm.foldCode(CodeMirror.Pos(i, 0), { scanUp: false }, "unfold");\n      });\n    };\n    CodeMirror.registerHelper("fold", "combine", function() {\n      var funcs = Array.prototype.slice.call(arguments, 0);\n      return function(cm, start) {\n        for (var i = 0; i < funcs.length; ++i) {\n          var found = funcs[i](cm, start);\n          if (found)\n            return found;\n        }\n      };\n    });\n    CodeMirror.registerHelper("fold", "auto", function(cm, start) {\n      var helpers = cm.getHelpers(start, "fold");\n      for (var i = 0; i < helpers.length; i++) {\n        var cur = helpers[i](cm, start);\n        if (cur)\n          return cur;\n      }\n    });\n    var defaultOptions = {\n      rangeFinder: CodeMirror.fold.auto,\n      widget: "\\u2194",\n      minFoldSize: 0,\n      scanUp: false,\n      clearOnEnter: true\n    };\n    CodeMirror.defineOption("foldOptions", null);\n    function getOption(cm, options, name) {\n      if (options && options[name] !== void 0)\n        return options[name];\n      var editorOptions = cm.options.foldOptions;\n      if (editorOptions && editorOptions[name] !== void 0)\n        return editorOptions[name];\n      return defaultOptions[name];\n    }\n    __name(getOption, "getOption");\n    CodeMirror.defineExtension("foldOption", function(options, name) {\n      return getOption(this, options, name);\n    });\n  });\n})();\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports, foldcode.exports);\n  })(function(CodeMirror) {\n    CodeMirror.defineOption("foldGutter", false, function(cm, val, old) {\n      if (old && old != CodeMirror.Init) {\n        cm.clearGutter(cm.state.foldGutter.options.gutter);\n        cm.state.foldGutter = null;\n        cm.off("gutterClick", onGutterClick);\n        cm.off("changes", onChange);\n        cm.off("viewportChange", onViewportChange);\n        cm.off("fold", onFold);\n        cm.off("unfold", onFold);\n        cm.off("swapDoc", onChange);\n      }\n      if (val) {\n        cm.state.foldGutter = new State(parseOptions(val));\n        updateInViewport(cm);\n        cm.on("gutterClick", onGutterClick);\n        cm.on("changes", onChange);\n        cm.on("viewportChange", onViewportChange);\n        cm.on("fold", onFold);\n        cm.on("unfold", onFold);\n        cm.on("swapDoc", onChange);\n      }\n    });\n    var Pos = CodeMirror.Pos;\n    function State(options) {\n      this.options = options;\n      this.from = this.to = 0;\n    }\n    __name(State, "State");\n    function parseOptions(opts) {\n      if (opts === true)\n        opts = {};\n      if (opts.gutter == null)\n        opts.gutter = "CodeMirror-foldgutter";\n      if (opts.indicatorOpen == null)\n        opts.indicatorOpen = "CodeMirror-foldgutter-open";\n      if (opts.indicatorFolded == null)\n        opts.indicatorFolded = "CodeMirror-foldgutter-folded";\n      return opts;\n    }\n    __name(parseOptions, "parseOptions");\n    function isFolded(cm, line) {\n      var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold) {\n          var fromPos = marks[i].find(-1);\n          if (fromPos && fromPos.line === line)\n            return marks[i];\n        }\n      }\n    }\n    __name(isFolded, "isFolded");\n    function marker(spec) {\n      if (typeof spec == "string") {\n        var elt = document.createElement("div");\n        elt.className = spec + " CodeMirror-guttermarker-subtle";\n        return elt;\n      } else {\n        return spec.cloneNode(true);\n      }\n    }\n    __name(marker, "marker");\n    function updateFoldInfo(cm, from, to) {\n      var opts = cm.state.foldGutter.options, cur = from - 1;\n      var minSize = cm.foldOption(opts, "minFoldSize");\n      var func = cm.foldOption(opts, "rangeFinder");\n      var clsFolded = typeof opts.indicatorFolded == "string" && classTest(opts.indicatorFolded);\n      var clsOpen = typeof opts.indicatorOpen == "string" && classTest(opts.indicatorOpen);\n      cm.eachLine(from, to, function(line) {\n        ++cur;\n        var mark = null;\n        var old = line.gutterMarkers;\n        if (old)\n          old = old[opts.gutter];\n        if (isFolded(cm, cur)) {\n          if (clsFolded && old && clsFolded.test(old.className))\n            return;\n          mark = marker(opts.indicatorFolded);\n        } else {\n          var pos = Pos(cur, 0);\n          var range = func && func(cm, pos);\n          if (range && range.to.line - range.from.line >= minSize) {\n            if (clsOpen && old && clsOpen.test(old.className))\n              return;\n            mark = marker(opts.indicatorOpen);\n          }\n        }\n        if (!mark && !old)\n          return;\n        cm.setGutterMarker(line, opts.gutter, mark);\n      });\n    }\n    __name(updateFoldInfo, "updateFoldInfo");\n    function classTest(cls) {\n      return new RegExp("(^|\\\\s)" + cls + "(?:$|\\\\s)\\\\s*");\n    }\n    __name(classTest, "classTest");\n    function updateInViewport(cm) {\n      var vp = cm.getViewport(), state = cm.state.foldGutter;\n      if (!state)\n        return;\n      cm.operation(function() {\n        updateFoldInfo(cm, vp.from, vp.to);\n      });\n      state.from = vp.from;\n      state.to = vp.to;\n    }\n    __name(updateInViewport, "updateInViewport");\n    function onGutterClick(cm, line, gutter) {\n      var state = cm.state.foldGutter;\n      if (!state)\n        return;\n      var opts = state.options;\n      if (gutter != opts.gutter)\n        return;\n      var folded = isFolded(cm, line);\n      if (folded)\n        folded.clear();\n      else\n        cm.foldCode(Pos(line, 0), opts);\n    }\n    __name(onGutterClick, "onGutterClick");\n    function onChange(cm) {\n      var state = cm.state.foldGutter;\n      if (!state)\n        return;\n      var opts = state.options;\n      state.from = state.to = 0;\n      clearTimeout(state.changeUpdate);\n      state.changeUpdate = setTimeout(function() {\n        updateInViewport(cm);\n      }, opts.foldOnChangeTimeSpan || 600);\n    }\n    __name(onChange, "onChange");\n    function onViewportChange(cm) {\n      var state = cm.state.foldGutter;\n      if (!state)\n        return;\n      var opts = state.options;\n      clearTimeout(state.changeUpdate);\n      state.changeUpdate = setTimeout(function() {\n        var vp = cm.getViewport();\n        if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n          updateInViewport(cm);\n        } else {\n          cm.operation(function() {\n            if (vp.from < state.from) {\n              updateFoldInfo(cm, vp.from, state.from);\n              state.from = vp.from;\n            }\n            if (vp.to > state.to) {\n              updateFoldInfo(cm, state.to, vp.to);\n              state.to = vp.to;\n            }\n          });\n        }\n      }, opts.updateViewportTimeSpan || 400);\n    }\n    __name(onViewportChange, "onViewportChange");\n    function onFold(cm, from) {\n      var state = cm.state.foldGutter;\n      if (!state)\n        return;\n      var line = from.line;\n      if (line >= state.from && line < state.to)\n        updateFoldInfo(cm, line, line + 1);\n    }\n    __name(onFold, "onFold");\n  });\n})();\nvar foldgutter = foldgutter$2.exports;\nvar foldgutter$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: "Module",\n  "default": foldgutter\n}, [foldgutter$2.exports]));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55739\n')}}]);