"use strict";(self.webpackChunkcachiql_demo=self.webpackChunkcachiql_demo||[]).push([[79],{26079:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "s": () => (/* binding */ showHint$1)\n/* harmony export */ });\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97480);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== "string" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== "default" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, "_mergeNamespaces");\nvar showHint$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports);\n  })(function(CodeMirror) {\n    var HINT_ELEMENT_CLASS = "CodeMirror-hint";\n    var ACTIVE_HINT_ELEMENT_CLASS = "CodeMirror-hint-active";\n    CodeMirror.showHint = function(cm, getHints, options) {\n      if (!getHints)\n        return cm.showHint(options);\n      if (options && options.async)\n        getHints.async = true;\n      var newOpts = { hint: getHints };\n      if (options)\n        for (var prop in options)\n          newOpts[prop] = options[prop];\n      return cm.showHint(newOpts);\n    };\n    CodeMirror.defineExtension("showHint", function(options) {\n      options = parseOptions(this, this.getCursor("start"), options);\n      var selections = this.listSelections();\n      if (selections.length > 1)\n        return;\n      if (this.somethingSelected()) {\n        if (!options.hint.supportsSelection)\n          return;\n        for (var i = 0; i < selections.length; i++)\n          if (selections[i].head.line != selections[i].anchor.line)\n            return;\n      }\n      if (this.state.completionActive)\n        this.state.completionActive.close();\n      var completion = this.state.completionActive = new Completion(this, options);\n      if (!completion.options.hint)\n        return;\n      CodeMirror.signal(this, "startCompletion", this);\n      completion.update(true);\n    });\n    CodeMirror.defineExtension("closeHint", function() {\n      if (this.state.completionActive)\n        this.state.completionActive.close();\n    });\n    function Completion(cm, options) {\n      this.cm = cm;\n      this.options = options;\n      this.widget = null;\n      this.debounce = 0;\n      this.tick = 0;\n      this.startPos = this.cm.getCursor("start");\n      this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n      if (this.options.updateOnCursorActivity) {\n        var self = this;\n        cm.on("cursorActivity", this.activityFunc = function() {\n          self.cursorActivity();\n        });\n      }\n    }\n    __name(Completion, "Completion");\n    var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n      return setTimeout(fn, 1e3 / 60);\n    };\n    var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n    Completion.prototype = {\n      close: function() {\n        if (!this.active())\n          return;\n        this.cm.state.completionActive = null;\n        this.tick = null;\n        if (this.options.updateOnCursorActivity) {\n          this.cm.off("cursorActivity", this.activityFunc);\n        }\n        if (this.widget && this.data)\n          CodeMirror.signal(this.data, "close");\n        if (this.widget)\n          this.widget.close();\n        CodeMirror.signal(this.cm, "endCompletion", this.cm);\n      },\n      active: function() {\n        return this.cm.state.completionActive == this;\n      },\n      pick: function(data, i) {\n        var completion = data.list[i], self = this;\n        this.cm.operation(function() {\n          if (completion.hint)\n            completion.hint(self.cm, data, completion);\n          else\n            self.cm.replaceRange(getText(completion), completion.from || data.from, completion.to || data.to, "complete");\n          CodeMirror.signal(data, "pick", completion);\n          self.cm.scrollIntoView();\n        });\n        if (this.options.closeOnPick) {\n          this.close();\n        }\n      },\n      cursorActivity: function() {\n        if (this.debounce) {\n          cancelAnimationFrame(this.debounce);\n          this.debounce = 0;\n        }\n        var identStart = this.startPos;\n        if (this.data) {\n          identStart = this.data.from;\n        }\n        var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n        if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch || pos.ch < identStart.ch || this.cm.somethingSelected() || (!pos.ch || this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n          this.close();\n        } else {\n          var self = this;\n          this.debounce = requestAnimationFrame(function() {\n            self.update();\n          });\n          if (this.widget)\n            this.widget.disable();\n        }\n      },\n      update: function(first) {\n        if (this.tick == null)\n          return;\n        var self = this, myTick = ++this.tick;\n        fetchHints(this.options.hint, this.cm, this.options, function(data) {\n          if (self.tick == myTick)\n            self.finishUpdate(data, first);\n        });\n      },\n      finishUpdate: function(data, first) {\n        if (this.data)\n          CodeMirror.signal(this.data, "update");\n        var picked = this.widget && this.widget.picked || first && this.options.completeSingle;\n        if (this.widget)\n          this.widget.close();\n        this.data = data;\n        if (data && data.list.length) {\n          if (picked && data.list.length == 1) {\n            this.pick(data, 0);\n          } else {\n            this.widget = new Widget(this, data);\n            CodeMirror.signal(data, "shown");\n          }\n        }\n      }\n    };\n    function parseOptions(cm, pos, options) {\n      var editor = cm.options.hintOptions;\n      var out = {};\n      for (var prop in defaultOptions)\n        out[prop] = defaultOptions[prop];\n      if (editor) {\n        for (var prop in editor)\n          if (editor[prop] !== void 0)\n            out[prop] = editor[prop];\n      }\n      if (options) {\n        for (var prop in options)\n          if (options[prop] !== void 0)\n            out[prop] = options[prop];\n      }\n      if (out.hint.resolve)\n        out.hint = out.hint.resolve(cm, pos);\n      return out;\n    }\n    __name(parseOptions, "parseOptions");\n    function getText(completion) {\n      if (typeof completion == "string")\n        return completion;\n      else\n        return completion.text;\n    }\n    __name(getText, "getText");\n    function buildKeyMap(completion, handle) {\n      var baseMap = {\n        Up: function() {\n          handle.moveFocus(-1);\n        },\n        Down: function() {\n          handle.moveFocus(1);\n        },\n        PageUp: function() {\n          handle.moveFocus(-handle.menuSize() + 1, true);\n        },\n        PageDown: function() {\n          handle.moveFocus(handle.menuSize() - 1, true);\n        },\n        Home: function() {\n          handle.setFocus(0);\n        },\n        End: function() {\n          handle.setFocus(handle.length - 1);\n        },\n        Enter: handle.pick,\n        Tab: handle.pick,\n        Esc: handle.close\n      };\n      var mac = /Mac/.test(navigator.platform);\n      if (mac) {\n        baseMap["Ctrl-P"] = function() {\n          handle.moveFocus(-1);\n        };\n        baseMap["Ctrl-N"] = function() {\n          handle.moveFocus(1);\n        };\n      }\n      var custom = completion.options.customKeys;\n      var ourMap = custom ? {} : baseMap;\n      function addBinding(key2, val) {\n        var bound;\n        if (typeof val != "string")\n          bound = /* @__PURE__ */ __name(function(cm) {\n            return val(cm, handle);\n          }, "bound");\n        else if (baseMap.hasOwnProperty(val))\n          bound = baseMap[val];\n        else\n          bound = val;\n        ourMap[key2] = bound;\n      }\n      __name(addBinding, "addBinding");\n      if (custom) {\n        for (var key in custom)\n          if (custom.hasOwnProperty(key))\n            addBinding(key, custom[key]);\n      }\n      var extra = completion.options.extraKeys;\n      if (extra) {\n        for (var key in extra)\n          if (extra.hasOwnProperty(key))\n            addBinding(key, extra[key]);\n      }\n      return ourMap;\n    }\n    __name(buildKeyMap, "buildKeyMap");\n    function getHintElement(hintsElement, el) {\n      while (el && el != hintsElement) {\n        if (el.nodeName.toUpperCase() === "LI" && el.parentNode == hintsElement)\n          return el;\n        el = el.parentNode;\n      }\n    }\n    __name(getHintElement, "getHintElement");\n    function Widget(completion, data) {\n      this.id = "cm-complete-" + Math.floor(Math.random(1e6));\n      this.completion = completion;\n      this.data = data;\n      this.picked = false;\n      var widget = this, cm = completion.cm;\n      var ownerDocument = cm.getInputField().ownerDocument;\n      var parentWindow = ownerDocument.defaultView || ownerDocument.parentWindow;\n      var hints = this.hints = ownerDocument.createElement("ul");\n      hints.setAttribute("role", "listbox");\n      hints.setAttribute("aria-expanded", "true");\n      hints.id = this.id;\n      var theme = completion.cm.options.theme;\n      hints.className = "CodeMirror-hints " + theme;\n      this.selectedHint = data.selectedHint || 0;\n      var completions = data.list;\n      for (var i = 0; i < completions.length; ++i) {\n        var elt = hints.appendChild(ownerDocument.createElement("li")), cur = completions[i];\n        var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? "" : " " + ACTIVE_HINT_ELEMENT_CLASS);\n        if (cur.className != null)\n          className = cur.className + " " + className;\n        elt.className = className;\n        if (i == this.selectedHint)\n          elt.setAttribute("aria-selected", "true");\n        elt.id = this.id + "-" + i;\n        elt.setAttribute("role", "option");\n        if (cur.render)\n          cur.render(elt, data, cur);\n        else\n          elt.appendChild(ownerDocument.createTextNode(cur.displayText || getText(cur)));\n        elt.hintId = i;\n      }\n      var container = completion.options.container || ownerDocument.body;\n      var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n      var left = pos.left, top = pos.bottom, below = true;\n      var offsetLeft = 0, offsetTop = 0;\n      if (container !== ownerDocument.body) {\n        var isContainerPositioned = ["absolute", "relative", "fixed"].indexOf(parentWindow.getComputedStyle(container).position) !== -1;\n        var offsetParent = isContainerPositioned ? container : container.offsetParent;\n        var offsetParentPosition = offsetParent.getBoundingClientRect();\n        var bodyPosition = ownerDocument.body.getBoundingClientRect();\n        offsetLeft = offsetParentPosition.left - bodyPosition.left - offsetParent.scrollLeft;\n        offsetTop = offsetParentPosition.top - bodyPosition.top - offsetParent.scrollTop;\n      }\n      hints.style.left = left - offsetLeft + "px";\n      hints.style.top = top - offsetTop + "px";\n      var winW = parentWindow.innerWidth || Math.max(ownerDocument.body.offsetWidth, ownerDocument.documentElement.offsetWidth);\n      var winH = parentWindow.innerHeight || Math.max(ownerDocument.body.offsetHeight, ownerDocument.documentElement.offsetHeight);\n      container.appendChild(hints);\n      cm.getInputField().setAttribute("aria-autocomplete", "list");\n      cm.getInputField().setAttribute("aria-owns", this.id);\n      cm.getInputField().setAttribute("aria-activedescendant", this.id + "-" + this.selectedHint);\n      var box = completion.options.moveOnOverlap ? hints.getBoundingClientRect() : new DOMRect();\n      var scrolls = completion.options.paddingForScrollbar ? hints.scrollHeight > hints.clientHeight + 1 : false;\n      var startScroll;\n      setTimeout(function() {\n        startScroll = cm.getScrollInfo();\n      });\n      var overlapY = box.bottom - winH;\n      if (overlapY > 0) {\n        var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n        if (curTop - height > 0) {\n          hints.style.top = (top = pos.top - height - offsetTop) + "px";\n          below = false;\n        } else if (height > winH) {\n          hints.style.height = winH - 5 + "px";\n          hints.style.top = (top = pos.bottom - box.top - offsetTop) + "px";\n          var cursor = cm.getCursor();\n          if (data.from.ch != cursor.ch) {\n            pos = cm.cursorCoords(cursor);\n            hints.style.left = (left = pos.left - offsetLeft) + "px";\n            box = hints.getBoundingClientRect();\n          }\n        }\n      }\n      var overlapX = box.right - winW;\n      if (scrolls)\n        overlapX += cm.display.nativeBarWidth;\n      if (overlapX > 0) {\n        if (box.right - box.left > winW) {\n          hints.style.width = winW - 5 + "px";\n          overlapX -= box.right - box.left - winW;\n        }\n        hints.style.left = (left = pos.left - overlapX - offsetLeft) + "px";\n      }\n      if (scrolls)\n        for (var node = hints.firstChild; node; node = node.nextSibling)\n          node.style.paddingRight = cm.display.nativeBarWidth + "px";\n      cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n        moveFocus: function(n, avoidWrap) {\n          widget.changeActive(widget.selectedHint + n, avoidWrap);\n        },\n        setFocus: function(n) {\n          widget.changeActive(n);\n        },\n        menuSize: function() {\n          return widget.screenAmount();\n        },\n        length: completions.length,\n        close: function() {\n          completion.close();\n        },\n        pick: function() {\n          widget.pick();\n        },\n        data\n      }));\n      if (completion.options.closeOnUnfocus) {\n        var closingOnBlur;\n        cm.on("blur", this.onBlur = function() {\n          closingOnBlur = setTimeout(function() {\n            completion.close();\n          }, 100);\n        });\n        cm.on("focus", this.onFocus = function() {\n          clearTimeout(closingOnBlur);\n        });\n      }\n      cm.on("scroll", this.onScroll = function() {\n        var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n        if (!startScroll)\n          startScroll = cm.getScrollInfo();\n        var newTop = top + startScroll.top - curScroll.top;\n        var point = newTop - (parentWindow.pageYOffset || (ownerDocument.documentElement || ownerDocument.body).scrollTop);\n        if (!below)\n          point += hints.offsetHeight;\n        if (point <= editor.top || point >= editor.bottom)\n          return completion.close();\n        hints.style.top = newTop + "px";\n        hints.style.left = left + startScroll.left - curScroll.left + "px";\n      });\n      CodeMirror.on(hints, "dblclick", function(e) {\n        var t = getHintElement(hints, e.target || e.srcElement);\n        if (t && t.hintId != null) {\n          widget.changeActive(t.hintId);\n          widget.pick();\n        }\n      });\n      CodeMirror.on(hints, "click", function(e) {\n        var t = getHintElement(hints, e.target || e.srcElement);\n        if (t && t.hintId != null) {\n          widget.changeActive(t.hintId);\n          if (completion.options.completeOnSingleClick)\n            widget.pick();\n        }\n      });\n      CodeMirror.on(hints, "mousedown", function() {\n        setTimeout(function() {\n          cm.focus();\n        }, 20);\n      });\n      var selectedHintRange = this.getSelectedHintRange();\n      if (selectedHintRange.from !== 0 || selectedHintRange.to !== 0) {\n        this.scrollToActive();\n      }\n      CodeMirror.signal(data, "select", completions[this.selectedHint], hints.childNodes[this.selectedHint]);\n      return true;\n    }\n    __name(Widget, "Widget");\n    Widget.prototype = {\n      close: function() {\n        if (this.completion.widget != this)\n          return;\n        this.completion.widget = null;\n        if (this.hints.parentNode)\n          this.hints.parentNode.removeChild(this.hints);\n        this.completion.cm.removeKeyMap(this.keyMap);\n        var input = this.completion.cm.getInputField();\n        input.removeAttribute("aria-activedescendant");\n        input.removeAttribute("aria-owns");\n        var cm = this.completion.cm;\n        if (this.completion.options.closeOnUnfocus) {\n          cm.off("blur", this.onBlur);\n          cm.off("focus", this.onFocus);\n        }\n        cm.off("scroll", this.onScroll);\n      },\n      disable: function() {\n        this.completion.cm.removeKeyMap(this.keyMap);\n        var widget = this;\n        this.keyMap = { Enter: function() {\n          widget.picked = true;\n        } };\n        this.completion.cm.addKeyMap(this.keyMap);\n      },\n      pick: function() {\n        this.completion.pick(this.data, this.selectedHint);\n      },\n      changeActive: function(i, avoidWrap) {\n        if (i >= this.data.list.length)\n          i = avoidWrap ? this.data.list.length - 1 : 0;\n        else if (i < 0)\n          i = avoidWrap ? 0 : this.data.list.length - 1;\n        if (this.selectedHint == i)\n          return;\n        var node = this.hints.childNodes[this.selectedHint];\n        if (node) {\n          node.className = node.className.replace(" " + ACTIVE_HINT_ELEMENT_CLASS, "");\n          node.removeAttribute("aria-selected");\n        }\n        node = this.hints.childNodes[this.selectedHint = i];\n        node.className += " " + ACTIVE_HINT_ELEMENT_CLASS;\n        node.setAttribute("aria-selected", "true");\n        this.completion.cm.getInputField().setAttribute("aria-activedescendant", node.id);\n        this.scrollToActive();\n        CodeMirror.signal(this.data, "select", this.data.list[this.selectedHint], node);\n      },\n      scrollToActive: function() {\n        var selectedHintRange = this.getSelectedHintRange();\n        var node1 = this.hints.childNodes[selectedHintRange.from];\n        var node2 = this.hints.childNodes[selectedHintRange.to];\n        var firstNode = this.hints.firstChild;\n        if (node1.offsetTop < this.hints.scrollTop)\n          this.hints.scrollTop = node1.offsetTop - firstNode.offsetTop;\n        else if (node2.offsetTop + node2.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n          this.hints.scrollTop = node2.offsetTop + node2.offsetHeight - this.hints.clientHeight + firstNode.offsetTop;\n      },\n      screenAmount: function() {\n        return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n      },\n      getSelectedHintRange: function() {\n        var margin = this.completion.options.scrollMargin || 0;\n        return {\n          from: Math.max(0, this.selectedHint - margin),\n          to: Math.min(this.data.list.length - 1, this.selectedHint + margin)\n        };\n      }\n    };\n    function applicableHelpers(cm, helpers) {\n      if (!cm.somethingSelected())\n        return helpers;\n      var result = [];\n      for (var i = 0; i < helpers.length; i++)\n        if (helpers[i].supportsSelection)\n          result.push(helpers[i]);\n      return result;\n    }\n    __name(applicableHelpers, "applicableHelpers");\n    function fetchHints(hint, cm, options, callback) {\n      if (hint.async) {\n        hint(cm, callback, options);\n      } else {\n        var result = hint(cm, options);\n        if (result && result.then)\n          result.then(callback);\n        else\n          callback(result);\n      }\n    }\n    __name(fetchHints, "fetchHints");\n    function resolveAutoHints(cm, pos) {\n      var helpers = cm.getHelpers(pos, "hint"), words;\n      if (helpers.length) {\n        var resolved = /* @__PURE__ */ __name(function(cm2, callback, options) {\n          var app = applicableHelpers(cm2, helpers);\n          function run(i) {\n            if (i == app.length)\n              return callback(null);\n            fetchHints(app[i], cm2, options, function(result) {\n              if (result && result.list.length > 0)\n                callback(result);\n              else\n                run(i + 1);\n            });\n          }\n          __name(run, "run");\n          run(0);\n        }, "resolved");\n        resolved.async = true;\n        resolved.supportsSelection = true;\n        return resolved;\n      } else if (words = cm.getHelper(cm.getCursor(), "hintWords")) {\n        return function(cm2) {\n          return CodeMirror.hint.fromList(cm2, { words });\n        };\n      } else if (CodeMirror.hint.anyword) {\n        return function(cm2, options) {\n          return CodeMirror.hint.anyword(cm2, options);\n        };\n      } else {\n        return function() {\n        };\n      }\n    }\n    __name(resolveAutoHints, "resolveAutoHints");\n    CodeMirror.registerHelper("hint", "auto", {\n      resolve: resolveAutoHints\n    });\n    CodeMirror.registerHelper("hint", "fromList", function(cm, options) {\n      var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n      var term, from = CodeMirror.Pos(cur.line, token.start), to = cur;\n      if (token.start < cur.ch && /\\w/.test(token.string.charAt(cur.ch - token.start - 1))) {\n        term = token.string.substr(0, cur.ch - token.start);\n      } else {\n        term = "";\n        from = cur;\n      }\n      var found = [];\n      for (var i = 0; i < options.words.length; i++) {\n        var word = options.words[i];\n        if (word.slice(0, term.length) == term)\n          found.push(word);\n      }\n      if (found.length)\n        return { list: found, from, to };\n    });\n    CodeMirror.commands.autocomplete = CodeMirror.showHint;\n    var defaultOptions = {\n      hint: CodeMirror.hint.auto,\n      completeSingle: true,\n      alignWithWord: true,\n      closeCharacters: /[\\s()\\[\\]{};:>,]/,\n      closeOnPick: true,\n      closeOnUnfocus: true,\n      updateOnCursorActivity: true,\n      completeOnSingleClick: true,\n      container: null,\n      customKeys: null,\n      extraKeys: null,\n      paddingForScrollbar: true,\n      moveOnOverlap: true\n    };\n    CodeMirror.defineOption("hintOptions", null);\n  });\n})();\nvar showHint = showHint$2.exports;\nvar showHint$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: "Module",\n  "default": showHint\n}, [showHint$2.exports]));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26079\n')}}]);