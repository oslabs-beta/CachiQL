"use strict";(self.webpackChunkcachiql_demo=self.webpackChunkcachiql_demo||[]).push([[845],{60845:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "c": () => (/* binding */ closebrackets$1)\n/* harmony export */ });\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97480);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== "string" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== "default" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, "_mergeNamespaces");\nvar closebrackets$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports);\n  })(function(CodeMirror) {\n    var defaults = {\n      pairs: `()[]{}\'\'""`,\n      closeBefore: `)]}\'":;>`,\n      triples: "",\n      explode: "[]{}"\n    };\n    var Pos = CodeMirror.Pos;\n    CodeMirror.defineOption("autoCloseBrackets", false, function(cm, val, old) {\n      if (old && old != CodeMirror.Init) {\n        cm.removeKeyMap(keyMap);\n        cm.state.closeBrackets = null;\n      }\n      if (val) {\n        ensureBound(getOption(val, "pairs"));\n        cm.state.closeBrackets = val;\n        cm.addKeyMap(keyMap);\n      }\n    });\n    function getOption(conf, name) {\n      if (name == "pairs" && typeof conf == "string")\n        return conf;\n      if (typeof conf == "object" && conf[name] != null)\n        return conf[name];\n      return defaults[name];\n    }\n    __name(getOption, "getOption");\n    var keyMap = { Backspace: handleBackspace, Enter: handleEnter };\n    function ensureBound(chars) {\n      for (var i = 0; i < chars.length; i++) {\n        var ch = chars.charAt(i), key = "\'" + ch + "\'";\n        if (!keyMap[key])\n          keyMap[key] = handler(ch);\n      }\n    }\n    __name(ensureBound, "ensureBound");\n    ensureBound(defaults.pairs + "`");\n    function handler(ch) {\n      return function(cm) {\n        return handleChar(cm, ch);\n      };\n    }\n    __name(handler, "handler");\n    function getConfig(cm) {\n      var deflt = cm.state.closeBrackets;\n      if (!deflt || deflt.override)\n        return deflt;\n      var mode = cm.getModeAt(cm.getCursor());\n      return mode.closeBrackets || deflt;\n    }\n    __name(getConfig, "getConfig");\n    function handleBackspace(cm) {\n      var conf = getConfig(cm);\n      if (!conf || cm.getOption("disableInput"))\n        return CodeMirror.Pass;\n      var pairs = getOption(conf, "pairs");\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        if (!ranges[i].empty())\n          return CodeMirror.Pass;\n        var around = charsAround(cm, ranges[i].head);\n        if (!around || pairs.indexOf(around) % 2 != 0)\n          return CodeMirror.Pass;\n      }\n      for (var i = ranges.length - 1; i >= 0; i--) {\n        var cur = ranges[i].head;\n        cm.replaceRange("", Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1), "+delete");\n      }\n    }\n    __name(handleBackspace, "handleBackspace");\n    function handleEnter(cm) {\n      var conf = getConfig(cm);\n      var explode = conf && getOption(conf, "explode");\n      if (!explode || cm.getOption("disableInput"))\n        return CodeMirror.Pass;\n      var ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        if (!ranges[i].empty())\n          return CodeMirror.Pass;\n        var around = charsAround(cm, ranges[i].head);\n        if (!around || explode.indexOf(around) % 2 != 0)\n          return CodeMirror.Pass;\n      }\n      cm.operation(function() {\n        var linesep = cm.lineSeparator() || "\\n";\n        cm.replaceSelection(linesep + linesep, null);\n        moveSel(cm, -1);\n        ranges = cm.listSelections();\n        for (var i2 = 0; i2 < ranges.length; i2++) {\n          var line = ranges[i2].head.line;\n          cm.indentLine(line, null, true);\n          cm.indentLine(line + 1, null, true);\n        }\n      });\n    }\n    __name(handleEnter, "handleEnter");\n    function moveSel(cm, dir) {\n      var newRanges = [], ranges = cm.listSelections(), primary = 0;\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.head == cm.getCursor())\n          primary = i;\n        var pos = range.head.ch || dir > 0 ? { line: range.head.line, ch: range.head.ch + dir } : { line: range.head.line - 1 };\n        newRanges.push({ anchor: pos, head: pos });\n      }\n      cm.setSelections(newRanges, primary);\n    }\n    __name(moveSel, "moveSel");\n    function contractSelection(sel) {\n      var inverted = CodeMirror.cmpPos(sel.anchor, sel.head) > 0;\n      return {\n        anchor: new Pos(sel.anchor.line, sel.anchor.ch + (inverted ? -1 : 1)),\n        head: new Pos(sel.head.line, sel.head.ch + (inverted ? 1 : -1))\n      };\n    }\n    __name(contractSelection, "contractSelection");\n    function handleChar(cm, ch) {\n      var conf = getConfig(cm);\n      if (!conf || cm.getOption("disableInput"))\n        return CodeMirror.Pass;\n      var pairs = getOption(conf, "pairs");\n      var pos = pairs.indexOf(ch);\n      if (pos == -1)\n        return CodeMirror.Pass;\n      var closeBefore = getOption(conf, "closeBefore");\n      var triples = getOption(conf, "triples");\n      var identical = pairs.charAt(pos + 1) == ch;\n      var ranges = cm.listSelections();\n      var opening = pos % 2 == 0;\n      var type;\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i], cur = range.head, curType;\n        var next = cm.getRange(cur, Pos(cur.line, cur.ch + 1));\n        if (opening && !range.empty()) {\n          curType = "surround";\n        } else if ((identical || !opening) && next == ch) {\n          if (identical && stringStartsAfter(cm, cur))\n            curType = "both";\n          else if (triples.indexOf(ch) >= 0 && cm.getRange(cur, Pos(cur.line, cur.ch + 3)) == ch + ch + ch)\n            curType = "skipThree";\n          else\n            curType = "skip";\n        } else if (identical && cur.ch > 1 && triples.indexOf(ch) >= 0 && cm.getRange(Pos(cur.line, cur.ch - 2), cur) == ch + ch) {\n          if (cur.ch > 2 && /\\bstring/.test(cm.getTokenTypeAt(Pos(cur.line, cur.ch - 2))))\n            return CodeMirror.Pass;\n          curType = "addFour";\n        } else if (identical) {\n          var prev = cur.ch == 0 ? " " : cm.getRange(Pos(cur.line, cur.ch - 1), cur);\n          if (!CodeMirror.isWordChar(next) && prev != ch && !CodeMirror.isWordChar(prev))\n            curType = "both";\n          else\n            return CodeMirror.Pass;\n        } else if (opening && (next.length === 0 || /\\s/.test(next) || closeBefore.indexOf(next) > -1)) {\n          curType = "both";\n        } else {\n          return CodeMirror.Pass;\n        }\n        if (!type)\n          type = curType;\n        else if (type != curType)\n          return CodeMirror.Pass;\n      }\n      var left = pos % 2 ? pairs.charAt(pos - 1) : ch;\n      var right = pos % 2 ? ch : pairs.charAt(pos + 1);\n      cm.operation(function() {\n        if (type == "skip") {\n          moveSel(cm, 1);\n        } else if (type == "skipThree") {\n          moveSel(cm, 3);\n        } else if (type == "surround") {\n          var sels = cm.getSelections();\n          for (var i2 = 0; i2 < sels.length; i2++)\n            sels[i2] = left + sels[i2] + right;\n          cm.replaceSelections(sels, "around");\n          sels = cm.listSelections().slice();\n          for (var i2 = 0; i2 < sels.length; i2++)\n            sels[i2] = contractSelection(sels[i2]);\n          cm.setSelections(sels);\n        } else if (type == "both") {\n          cm.replaceSelection(left + right, null);\n          cm.triggerElectric(left + right);\n          moveSel(cm, -1);\n        } else if (type == "addFour") {\n          cm.replaceSelection(left + left + left + left, "before");\n          moveSel(cm, 1);\n        }\n      });\n    }\n    __name(handleChar, "handleChar");\n    function charsAround(cm, pos) {\n      var str = cm.getRange(Pos(pos.line, pos.ch - 1), Pos(pos.line, pos.ch + 1));\n      return str.length == 2 ? str : null;\n    }\n    __name(charsAround, "charsAround");\n    function stringStartsAfter(cm, pos) {\n      var token = cm.getTokenAt(Pos(pos.line, pos.ch + 1));\n      return /\\bstring/.test(token.type) && token.start == pos.ch && (pos.ch == 0 || !/\\bstring/.test(cm.getTokenTypeAt(pos)));\n    }\n    __name(stringStartsAfter, "stringStartsAfter");\n  });\n})();\nvar closebrackets = closebrackets$2.exports;\nvar closebrackets$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: "Module",\n  "default": closebrackets\n}, [closebrackets$2.exports]));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///60845\n')}}]);