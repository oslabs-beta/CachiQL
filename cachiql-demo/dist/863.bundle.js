"use strict";(self.webpackChunkcachiql_demo=self.webpackChunkcachiql_demo||[]).push([[863],{89863:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "j": () => (/* binding */ javascript$1)\n/* harmony export */ });\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97480);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== "string" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== "default" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, "_mergeNamespaces");\nvar javascript$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports);\n  })(function(CodeMirror) {\n    CodeMirror.defineMode("javascript", function(config, parserConfig) {\n      var indentUnit = config.indentUnit;\n      var statementIndent = parserConfig.statementIndent;\n      var jsonldMode = parserConfig.jsonld;\n      var jsonMode = parserConfig.json || jsonldMode;\n      var trackScope = parserConfig.trackScope !== false;\n      var isTS = parserConfig.typescript;\n      var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n      var keywords = function() {\n        function kw(type2) {\n          return { type: type2, style: "keyword" };\n        }\n        __name(kw, "kw");\n        var A = kw("keyword a"), B = kw("keyword b"), C = kw("keyword c"), D = kw("keyword d");\n        var operator = kw("operator"), atom = { type: "atom", style: "atom" };\n        return {\n          "if": kw("if"),\n          "while": A,\n          "with": A,\n          "else": B,\n          "do": B,\n          "try": B,\n          "finally": B,\n          "return": D,\n          "break": D,\n          "continue": D,\n          "new": kw("new"),\n          "delete": C,\n          "void": C,\n          "throw": C,\n          "debugger": kw("debugger"),\n          "var": kw("var"),\n          "const": kw("var"),\n          "let": kw("var"),\n          "function": kw("function"),\n          "catch": kw("catch"),\n          "for": kw("for"),\n          "switch": kw("switch"),\n          "case": kw("case"),\n          "default": kw("default"),\n          "in": operator,\n          "typeof": operator,\n          "instanceof": operator,\n          "true": atom,\n          "false": atom,\n          "null": atom,\n          "undefined": atom,\n          "NaN": atom,\n          "Infinity": atom,\n          "this": kw("this"),\n          "class": kw("class"),\n          "super": kw("atom"),\n          "yield": C,\n          "export": kw("export"),\n          "import": kw("import"),\n          "extends": C,\n          "await": C\n        };\n      }();\n      var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n      var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/;\n      function readRegexp(stream) {\n        var escaped = false, next, inSet = false;\n        while ((next = stream.next()) != null) {\n          if (!escaped) {\n            if (next == "/" && !inSet)\n              return;\n            if (next == "[")\n              inSet = true;\n            else if (inSet && next == "]")\n              inSet = false;\n          }\n          escaped = !escaped && next == "\\\\";\n        }\n      }\n      __name(readRegexp, "readRegexp");\n      var type, content;\n      function ret(tp, style, cont2) {\n        type = tp;\n        content = cont2;\n        return style;\n      }\n      __name(ret, "ret");\n      function tokenBase(stream, state) {\n        var ch = stream.next();\n        if (ch == \'"\' || ch == "\'") {\n          state.tokenize = tokenString(ch);\n          return state.tokenize(stream, state);\n        } else if (ch == "." && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n          return ret("number", "number");\n        } else if (ch == "." && stream.match("..")) {\n          return ret("spread", "meta");\n        } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n          return ret(ch);\n        } else if (ch == "=" && stream.eat(">")) {\n          return ret("=>", "operator");\n        } else if (ch == "0" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n          return ret("number", "number");\n        } else if (/\\d/.test(ch)) {\n          stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n          return ret("number", "number");\n        } else if (ch == "/") {\n          if (stream.eat("*")) {\n            state.tokenize = tokenComment;\n            return tokenComment(stream, state);\n          } else if (stream.eat("/")) {\n            stream.skipToEnd();\n            return ret("comment", "comment");\n          } else if (expressionAllowed(stream, state, 1)) {\n            readRegexp(stream);\n            stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n            return ret("regexp", "string-2");\n          } else {\n            stream.eat("=");\n            return ret("operator", "operator", stream.current());\n          }\n        } else if (ch == "`") {\n          state.tokenize = tokenQuasi;\n          return tokenQuasi(stream, state);\n        } else if (ch == "#" && stream.peek() == "!") {\n          stream.skipToEnd();\n          return ret("meta", "meta");\n        } else if (ch == "#" && stream.eatWhile(wordRE)) {\n          return ret("variable", "property");\n        } else if (ch == "<" && stream.match("!--") || ch == "-" && stream.match("->") && !/\\S/.test(stream.string.slice(0, stream.start))) {\n          stream.skipToEnd();\n          return ret("comment", "comment");\n        } else if (isOperatorChar.test(ch)) {\n          if (ch != ">" || !state.lexical || state.lexical.type != ">") {\n            if (stream.eat("=")) {\n              if (ch == "!" || ch == "=")\n                stream.eat("=");\n            } else if (/[<>*+\\-|&?]/.test(ch)) {\n              stream.eat(ch);\n              if (ch == ">")\n                stream.eat(ch);\n            }\n          }\n          if (ch == "?" && stream.eat("."))\n            return ret(".");\n          return ret("operator", "operator", stream.current());\n        } else if (wordRE.test(ch)) {\n          stream.eatWhile(wordRE);\n          var word = stream.current();\n          if (state.lastType != ".") {\n            if (keywords.propertyIsEnumerable(word)) {\n              var kw = keywords[word];\n              return ret(kw.type, kw.style, word);\n            }\n            if (word == "async" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n              return ret("async", "keyword", word);\n          }\n          return ret("variable", "variable", word);\n        }\n      }\n      __name(tokenBase, "tokenBase");\n      function tokenString(quote) {\n        return function(stream, state) {\n          var escaped = false, next;\n          if (jsonldMode && stream.peek() == "@" && stream.match(isJsonldKeyword)) {\n            state.tokenize = tokenBase;\n            return ret("jsonld-keyword", "meta");\n          }\n          while ((next = stream.next()) != null) {\n            if (next == quote && !escaped)\n              break;\n            escaped = !escaped && next == "\\\\";\n          }\n          if (!escaped)\n            state.tokenize = tokenBase;\n          return ret("string", "string");\n        };\n      }\n      __name(tokenString, "tokenString");\n      function tokenComment(stream, state) {\n        var maybeEnd = false, ch;\n        while (ch = stream.next()) {\n          if (ch == "/" && maybeEnd) {\n            state.tokenize = tokenBase;\n            break;\n          }\n          maybeEnd = ch == "*";\n        }\n        return ret("comment", "comment");\n      }\n      __name(tokenComment, "tokenComment");\n      function tokenQuasi(stream, state) {\n        var escaped = false, next;\n        while ((next = stream.next()) != null) {\n          if (!escaped && (next == "`" || next == "$" && stream.eat("{"))) {\n            state.tokenize = tokenBase;\n            break;\n          }\n          escaped = !escaped && next == "\\\\";\n        }\n        return ret("quasi", "string-2", stream.current());\n      }\n      __name(tokenQuasi, "tokenQuasi");\n      var brackets = "([{}])";\n      function findFatArrow(stream, state) {\n        if (state.fatArrowAt)\n          state.fatArrowAt = null;\n        var arrow = stream.string.indexOf("=>", stream.start);\n        if (arrow < 0)\n          return;\n        if (isTS) {\n          var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow));\n          if (m)\n            arrow = m.index;\n        }\n        var depth = 0, sawSomething = false;\n        for (var pos = arrow - 1; pos >= 0; --pos) {\n          var ch = stream.string.charAt(pos);\n          var bracket = brackets.indexOf(ch);\n          if (bracket >= 0 && bracket < 3) {\n            if (!depth) {\n              ++pos;\n              break;\n            }\n            if (--depth == 0) {\n              if (ch == "(")\n                sawSomething = true;\n              break;\n            }\n          } else if (bracket >= 3 && bracket < 6) {\n            ++depth;\n          } else if (wordRE.test(ch)) {\n            sawSomething = true;\n          } else if (/["\'\\/`]/.test(ch)) {\n            for (; ; --pos) {\n              if (pos == 0)\n                return;\n              var next = stream.string.charAt(pos - 1);\n              if (next == ch && stream.string.charAt(pos - 2) != "\\\\") {\n                pos--;\n                break;\n              }\n            }\n          } else if (sawSomething && !depth) {\n            ++pos;\n            break;\n          }\n        }\n        if (sawSomething && !depth)\n          state.fatArrowAt = pos;\n      }\n      __name(findFatArrow, "findFatArrow");\n      var atomicTypes = {\n        "atom": true,\n        "number": true,\n        "variable": true,\n        "string": true,\n        "regexp": true,\n        "this": true,\n        "import": true,\n        "jsonld-keyword": true\n      };\n      function JSLexical(indented, column, type2, align, prev, info) {\n        this.indented = indented;\n        this.column = column;\n        this.type = type2;\n        this.prev = prev;\n        this.info = info;\n        if (align != null)\n          this.align = align;\n      }\n      __name(JSLexical, "JSLexical");\n      function inScope(state, varname) {\n        if (!trackScope)\n          return false;\n        for (var v = state.localVars; v; v = v.next)\n          if (v.name == varname)\n            return true;\n        for (var cx2 = state.context; cx2; cx2 = cx2.prev) {\n          for (var v = cx2.vars; v; v = v.next)\n            if (v.name == varname)\n              return true;\n        }\n      }\n      __name(inScope, "inScope");\n      function parseJS(state, style, type2, content2, stream) {\n        var cc = state.cc;\n        cx.state = state;\n        cx.stream = stream;\n        cx.marked = null, cx.cc = cc;\n        cx.style = style;\n        if (!state.lexical.hasOwnProperty("align"))\n          state.lexical.align = true;\n        while (true) {\n          var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n          if (combinator(type2, content2)) {\n            while (cc.length && cc[cc.length - 1].lex)\n              cc.pop()();\n            if (cx.marked)\n              return cx.marked;\n            if (type2 == "variable" && inScope(state, content2))\n              return "variable-2";\n            return style;\n          }\n        }\n      }\n      __name(parseJS, "parseJS");\n      var cx = { state: null, column: null, marked: null, cc: null };\n      function pass() {\n        for (var i = arguments.length - 1; i >= 0; i--)\n          cx.cc.push(arguments[i]);\n      }\n      __name(pass, "pass");\n      function cont() {\n        pass.apply(null, arguments);\n        return true;\n      }\n      __name(cont, "cont");\n      function inList(name, list) {\n        for (var v = list; v; v = v.next)\n          if (v.name == name)\n            return true;\n        return false;\n      }\n      __name(inList, "inList");\n      function register(varname) {\n        var state = cx.state;\n        cx.marked = "def";\n        if (!trackScope)\n          return;\n        if (state.context) {\n          if (state.lexical.info == "var" && state.context && state.context.block) {\n            var newContext = registerVarScoped(varname, state.context);\n            if (newContext != null) {\n              state.context = newContext;\n              return;\n            }\n          } else if (!inList(varname, state.localVars)) {\n            state.localVars = new Var(varname, state.localVars);\n            return;\n          }\n        }\n        if (parserConfig.globalVars && !inList(varname, state.globalVars))\n          state.globalVars = new Var(varname, state.globalVars);\n      }\n      __name(register, "register");\n      function registerVarScoped(varname, context) {\n        if (!context) {\n          return null;\n        } else if (context.block) {\n          var inner = registerVarScoped(varname, context.prev);\n          if (!inner)\n            return null;\n          if (inner == context.prev)\n            return context;\n          return new Context(inner, context.vars, true);\n        } else if (inList(varname, context.vars)) {\n          return context;\n        } else {\n          return new Context(context.prev, new Var(varname, context.vars), false);\n        }\n      }\n      __name(registerVarScoped, "registerVarScoped");\n      function isModifier(name) {\n        return name == "public" || name == "private" || name == "protected" || name == "abstract" || name == "readonly";\n      }\n      __name(isModifier, "isModifier");\n      function Context(prev, vars, block2) {\n        this.prev = prev;\n        this.vars = vars;\n        this.block = block2;\n      }\n      __name(Context, "Context");\n      function Var(name, next) {\n        this.name = name;\n        this.next = next;\n      }\n      __name(Var, "Var");\n      var defaultVars = new Var("this", new Var("arguments", null));\n      function pushcontext() {\n        cx.state.context = new Context(cx.state.context, cx.state.localVars, false);\n        cx.state.localVars = defaultVars;\n      }\n      __name(pushcontext, "pushcontext");\n      function pushblockcontext() {\n        cx.state.context = new Context(cx.state.context, cx.state.localVars, true);\n        cx.state.localVars = null;\n      }\n      __name(pushblockcontext, "pushblockcontext");\n      pushcontext.lex = pushblockcontext.lex = true;\n      function popcontext() {\n        cx.state.localVars = cx.state.context.vars;\n        cx.state.context = cx.state.context.prev;\n      }\n      __name(popcontext, "popcontext");\n      popcontext.lex = true;\n      function pushlex(type2, info) {\n        var result = /* @__PURE__ */ __name(function() {\n          var state = cx.state, indent = state.indented;\n          if (state.lexical.type == "stat")\n            indent = state.lexical.indented;\n          else\n            for (var outer = state.lexical; outer && outer.type == ")" && outer.align; outer = outer.prev)\n              indent = outer.indented;\n          state.lexical = new JSLexical(indent, cx.stream.column(), type2, null, state.lexical, info);\n        }, "result");\n        result.lex = true;\n        return result;\n      }\n      __name(pushlex, "pushlex");\n      function poplex() {\n        var state = cx.state;\n        if (state.lexical.prev) {\n          if (state.lexical.type == ")")\n            state.indented = state.lexical.indented;\n          state.lexical = state.lexical.prev;\n        }\n      }\n      __name(poplex, "poplex");\n      poplex.lex = true;\n      function expect(wanted) {\n        function exp(type2) {\n          if (type2 == wanted)\n            return cont();\n          else if (wanted == ";" || type2 == "}" || type2 == ")" || type2 == "]")\n            return pass();\n          else\n            return cont(exp);\n        }\n        __name(exp, "exp");\n        return exp;\n      }\n      __name(expect, "expect");\n      function statement(type2, value) {\n        if (type2 == "var")\n          return cont(pushlex("vardef", value), vardef, expect(";"), poplex);\n        if (type2 == "keyword a")\n          return cont(pushlex("form"), parenExpr, statement, poplex);\n        if (type2 == "keyword b")\n          return cont(pushlex("form"), statement, poplex);\n        if (type2 == "keyword d")\n          return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex("stat"), maybeexpression, expect(";"), poplex);\n        if (type2 == "debugger")\n          return cont(expect(";"));\n        if (type2 == "{")\n          return cont(pushlex("}"), pushblockcontext, block, poplex, popcontext);\n        if (type2 == ";")\n          return cont();\n        if (type2 == "if") {\n          if (cx.state.lexical.info == "else" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n            cx.state.cc.pop()();\n          return cont(pushlex("form"), parenExpr, statement, poplex, maybeelse);\n        }\n        if (type2 == "function")\n          return cont(functiondef);\n        if (type2 == "for")\n          return cont(pushlex("form"), pushblockcontext, forspec, statement, popcontext, poplex);\n        if (type2 == "class" || isTS && value == "interface") {\n          cx.marked = "keyword";\n          return cont(pushlex("form", type2 == "class" ? type2 : value), className, poplex);\n        }\n        if (type2 == "variable") {\n          if (isTS && value == "declare") {\n            cx.marked = "keyword";\n            return cont(statement);\n          } else if (isTS && (value == "module" || value == "enum" || value == "type") && cx.stream.match(/^\\s*\\w/, false)) {\n            cx.marked = "keyword";\n            if (value == "enum")\n              return cont(enumdef);\n            else if (value == "type")\n              return cont(typename, expect("operator"), typeexpr, expect(";"));\n            else\n              return cont(pushlex("form"), pattern, expect("{"), pushlex("}"), block, poplex, poplex);\n          } else if (isTS && value == "namespace") {\n            cx.marked = "keyword";\n            return cont(pushlex("form"), expression, statement, poplex);\n          } else if (isTS && value == "abstract") {\n            cx.marked = "keyword";\n            return cont(statement);\n          } else {\n            return cont(pushlex("stat"), maybelabel);\n          }\n        }\n        if (type2 == "switch")\n          return cont(pushlex("form"), parenExpr, expect("{"), pushlex("}", "switch"), pushblockcontext, block, poplex, poplex, popcontext);\n        if (type2 == "case")\n          return cont(expression, expect(":"));\n        if (type2 == "default")\n          return cont(expect(":"));\n        if (type2 == "catch")\n          return cont(pushlex("form"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n        if (type2 == "export")\n          return cont(pushlex("stat"), afterExport, poplex);\n        if (type2 == "import")\n          return cont(pushlex("stat"), afterImport, poplex);\n        if (type2 == "async")\n          return cont(statement);\n        if (value == "@")\n          return cont(expression, statement);\n        return pass(pushlex("stat"), expression, expect(";"), poplex);\n      }\n      __name(statement, "statement");\n      function maybeCatchBinding(type2) {\n        if (type2 == "(")\n          return cont(funarg, expect(")"));\n      }\n      __name(maybeCatchBinding, "maybeCatchBinding");\n      function expression(type2, value) {\n        return expressionInner(type2, value, false);\n      }\n      __name(expression, "expression");\n      function expressionNoComma(type2, value) {\n        return expressionInner(type2, value, true);\n      }\n      __name(expressionNoComma, "expressionNoComma");\n      function parenExpr(type2) {\n        if (type2 != "(")\n          return pass();\n        return cont(pushlex(")"), maybeexpression, expect(")"), poplex);\n      }\n      __name(parenExpr, "parenExpr");\n      function expressionInner(type2, value, noComma) {\n        if (cx.state.fatArrowAt == cx.stream.start) {\n          var body = noComma ? arrowBodyNoComma : arrowBody;\n          if (type2 == "(")\n            return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, expect("=>"), body, popcontext);\n          else if (type2 == "variable")\n            return pass(pushcontext, pattern, expect("=>"), body, popcontext);\n        }\n        var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n        if (atomicTypes.hasOwnProperty(type2))\n          return cont(maybeop);\n        if (type2 == "function")\n          return cont(functiondef, maybeop);\n        if (type2 == "class" || isTS && value == "interface") {\n          cx.marked = "keyword";\n          return cont(pushlex("form"), classExpression, poplex);\n        }\n        if (type2 == "keyword c" || type2 == "async")\n          return cont(noComma ? expressionNoComma : expression);\n        if (type2 == "(")\n          return cont(pushlex(")"), maybeexpression, expect(")"), poplex, maybeop);\n        if (type2 == "operator" || type2 == "spread")\n          return cont(noComma ? expressionNoComma : expression);\n        if (type2 == "[")\n          return cont(pushlex("]"), arrayLiteral, poplex, maybeop);\n        if (type2 == "{")\n          return contCommasep(objprop, "}", null, maybeop);\n        if (type2 == "quasi")\n          return pass(quasi, maybeop);\n        if (type2 == "new")\n          return cont(maybeTarget(noComma));\n        return cont();\n      }\n      __name(expressionInner, "expressionInner");\n      function maybeexpression(type2) {\n        if (type2.match(/[;\\}\\)\\],]/))\n          return pass();\n        return pass(expression);\n      }\n      __name(maybeexpression, "maybeexpression");\n      function maybeoperatorComma(type2, value) {\n        if (type2 == ",")\n          return cont(maybeexpression);\n        return maybeoperatorNoComma(type2, value, false);\n      }\n      __name(maybeoperatorComma, "maybeoperatorComma");\n      function maybeoperatorNoComma(type2, value, noComma) {\n        var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n        var expr = noComma == false ? expression : expressionNoComma;\n        if (type2 == "=>")\n          return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n        if (type2 == "operator") {\n          if (/\\+\\+|--/.test(value) || isTS && value == "!")\n            return cont(me);\n          if (isTS && value == "<" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n            return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, me);\n          if (value == "?")\n            return cont(expression, expect(":"), expr);\n          return cont(expr);\n        }\n        if (type2 == "quasi") {\n          return pass(quasi, me);\n        }\n        if (type2 == ";")\n          return;\n        if (type2 == "(")\n          return contCommasep(expressionNoComma, ")", "call", me);\n        if (type2 == ".")\n          return cont(property, me);\n        if (type2 == "[")\n          return cont(pushlex("]"), maybeexpression, expect("]"), poplex, me);\n        if (isTS && value == "as") {\n          cx.marked = "keyword";\n          return cont(typeexpr, me);\n        }\n        if (type2 == "regexp") {\n          cx.state.lastType = cx.marked = "operator";\n          cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);\n          return cont(expr);\n        }\n      }\n      __name(maybeoperatorNoComma, "maybeoperatorNoComma");\n      function quasi(type2, value) {\n        if (type2 != "quasi")\n          return pass();\n        if (value.slice(value.length - 2) != "${")\n          return cont(quasi);\n        return cont(maybeexpression, continueQuasi);\n      }\n      __name(quasi, "quasi");\n      function continueQuasi(type2) {\n        if (type2 == "}") {\n          cx.marked = "string-2";\n          cx.state.tokenize = tokenQuasi;\n          return cont(quasi);\n        }\n      }\n      __name(continueQuasi, "continueQuasi");\n      function arrowBody(type2) {\n        findFatArrow(cx.stream, cx.state);\n        return pass(type2 == "{" ? statement : expression);\n      }\n      __name(arrowBody, "arrowBody");\n      function arrowBodyNoComma(type2) {\n        findFatArrow(cx.stream, cx.state);\n        return pass(type2 == "{" ? statement : expressionNoComma);\n      }\n      __name(arrowBodyNoComma, "arrowBodyNoComma");\n      function maybeTarget(noComma) {\n        return function(type2) {\n          if (type2 == ".")\n            return cont(noComma ? targetNoComma : target);\n          else if (type2 == "variable" && isTS)\n            return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);\n          else\n            return pass(noComma ? expressionNoComma : expression);\n        };\n      }\n      __name(maybeTarget, "maybeTarget");\n      function target(_, value) {\n        if (value == "target") {\n          cx.marked = "keyword";\n          return cont(maybeoperatorComma);\n        }\n      }\n      __name(target, "target");\n      function targetNoComma(_, value) {\n        if (value == "target") {\n          cx.marked = "keyword";\n          return cont(maybeoperatorNoComma);\n        }\n      }\n      __name(targetNoComma, "targetNoComma");\n      function maybelabel(type2) {\n        if (type2 == ":")\n          return cont(poplex, statement);\n        return pass(maybeoperatorComma, expect(";"), poplex);\n      }\n      __name(maybelabel, "maybelabel");\n      function property(type2) {\n        if (type2 == "variable") {\n          cx.marked = "property";\n          return cont();\n        }\n      }\n      __name(property, "property");\n      function objprop(type2, value) {\n        if (type2 == "async") {\n          cx.marked = "property";\n          return cont(objprop);\n        } else if (type2 == "variable" || cx.style == "keyword") {\n          cx.marked = "property";\n          if (value == "get" || value == "set")\n            return cont(getterSetter);\n          var m;\n          if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n            cx.state.fatArrowAt = cx.stream.pos + m[0].length;\n          return cont(afterprop);\n        } else if (type2 == "number" || type2 == "string") {\n          cx.marked = jsonldMode ? "property" : cx.style + " property";\n          return cont(afterprop);\n        } else if (type2 == "jsonld-keyword") {\n          return cont(afterprop);\n        } else if (isTS && isModifier(value)) {\n          cx.marked = "keyword";\n          return cont(objprop);\n        } else if (type2 == "[") {\n          return cont(expression, maybetype, expect("]"), afterprop);\n        } else if (type2 == "spread") {\n          return cont(expressionNoComma, afterprop);\n        } else if (value == "*") {\n          cx.marked = "keyword";\n          return cont(objprop);\n        } else if (type2 == ":") {\n          return pass(afterprop);\n        }\n      }\n      __name(objprop, "objprop");\n      function getterSetter(type2) {\n        if (type2 != "variable")\n          return pass(afterprop);\n        cx.marked = "property";\n        return cont(functiondef);\n      }\n      __name(getterSetter, "getterSetter");\n      function afterprop(type2) {\n        if (type2 == ":")\n          return cont(expressionNoComma);\n        if (type2 == "(")\n          return pass(functiondef);\n      }\n      __name(afterprop, "afterprop");\n      function commasep(what, end, sep) {\n        function proceed(type2, value) {\n          if (sep ? sep.indexOf(type2) > -1 : type2 == ",") {\n            var lex = cx.state.lexical;\n            if (lex.info == "call")\n              lex.pos = (lex.pos || 0) + 1;\n            return cont(function(type3, value2) {\n              if (type3 == end || value2 == end)\n                return pass();\n              return pass(what);\n            }, proceed);\n          }\n          if (type2 == end || value == end)\n            return cont();\n          if (sep && sep.indexOf(";") > -1)\n            return pass(what);\n          return cont(expect(end));\n        }\n        __name(proceed, "proceed");\n        return function(type2, value) {\n          if (type2 == end || value == end)\n            return cont();\n          return pass(what, proceed);\n        };\n      }\n      __name(commasep, "commasep");\n      function contCommasep(what, end, info) {\n        for (var i = 3; i < arguments.length; i++)\n          cx.cc.push(arguments[i]);\n        return cont(pushlex(end, info), commasep(what, end), poplex);\n      }\n      __name(contCommasep, "contCommasep");\n      function block(type2) {\n        if (type2 == "}")\n          return cont();\n        return pass(statement, block);\n      }\n      __name(block, "block");\n      function maybetype(type2, value) {\n        if (isTS) {\n          if (type2 == ":")\n            return cont(typeexpr);\n          if (value == "?")\n            return cont(maybetype);\n        }\n      }\n      __name(maybetype, "maybetype");\n      function maybetypeOrIn(type2, value) {\n        if (isTS && (type2 == ":" || value == "in"))\n          return cont(typeexpr);\n      }\n      __name(maybetypeOrIn, "maybetypeOrIn");\n      function mayberettype(type2) {\n        if (isTS && type2 == ":") {\n          if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false))\n            return cont(expression, isKW, typeexpr);\n          else\n            return cont(typeexpr);\n        }\n      }\n      __name(mayberettype, "mayberettype");\n      function isKW(_, value) {\n        if (value == "is") {\n          cx.marked = "keyword";\n          return cont();\n        }\n      }\n      __name(isKW, "isKW");\n      function typeexpr(type2, value) {\n        if (value == "keyof" || value == "typeof" || value == "infer" || value == "readonly") {\n          cx.marked = "keyword";\n          return cont(value == "typeof" ? expressionNoComma : typeexpr);\n        }\n        if (type2 == "variable" || value == "void") {\n          cx.marked = "type";\n          return cont(afterType);\n        }\n        if (value == "|" || value == "&")\n          return cont(typeexpr);\n        if (type2 == "string" || type2 == "number" || type2 == "atom")\n          return cont(afterType);\n        if (type2 == "[")\n          return cont(pushlex("]"), commasep(typeexpr, "]", ","), poplex, afterType);\n        if (type2 == "{")\n          return cont(pushlex("}"), typeprops, poplex, afterType);\n        if (type2 == "(")\n          return cont(commasep(typearg, ")"), maybeReturnType, afterType);\n        if (type2 == "<")\n          return cont(commasep(typeexpr, ">"), typeexpr);\n        if (type2 == "quasi") {\n          return pass(quasiType, afterType);\n        }\n      }\n      __name(typeexpr, "typeexpr");\n      function maybeReturnType(type2) {\n        if (type2 == "=>")\n          return cont(typeexpr);\n      }\n      __name(maybeReturnType, "maybeReturnType");\n      function typeprops(type2) {\n        if (type2.match(/[\\}\\)\\]]/))\n          return cont();\n        if (type2 == "," || type2 == ";")\n          return cont(typeprops);\n        return pass(typeprop, typeprops);\n      }\n      __name(typeprops, "typeprops");\n      function typeprop(type2, value) {\n        if (type2 == "variable" || cx.style == "keyword") {\n          cx.marked = "property";\n          return cont(typeprop);\n        } else if (value == "?" || type2 == "number" || type2 == "string") {\n          return cont(typeprop);\n        } else if (type2 == ":") {\n          return cont(typeexpr);\n        } else if (type2 == "[") {\n          return cont(expect("variable"), maybetypeOrIn, expect("]"), typeprop);\n        } else if (type2 == "(") {\n          return pass(functiondecl, typeprop);\n        } else if (!type2.match(/[;\\}\\)\\],]/)) {\n          return cont();\n        }\n      }\n      __name(typeprop, "typeprop");\n      function quasiType(type2, value) {\n        if (type2 != "quasi")\n          return pass();\n        if (value.slice(value.length - 2) != "${")\n          return cont(quasiType);\n        return cont(typeexpr, continueQuasiType);\n      }\n      __name(quasiType, "quasiType");\n      function continueQuasiType(type2) {\n        if (type2 == "}") {\n          cx.marked = "string-2";\n          cx.state.tokenize = tokenQuasi;\n          return cont(quasiType);\n        }\n      }\n      __name(continueQuasiType, "continueQuasiType");\n      function typearg(type2, value) {\n        if (type2 == "variable" && cx.stream.match(/^\\s*[?:]/, false) || value == "?")\n          return cont(typearg);\n        if (type2 == ":")\n          return cont(typeexpr);\n        if (type2 == "spread")\n          return cont(typearg);\n        return pass(typeexpr);\n      }\n      __name(typearg, "typearg");\n      function afterType(type2, value) {\n        if (value == "<")\n          return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, afterType);\n        if (value == "|" || type2 == "." || value == "&")\n          return cont(typeexpr);\n        if (type2 == "[")\n          return cont(typeexpr, expect("]"), afterType);\n        if (value == "extends" || value == "implements") {\n          cx.marked = "keyword";\n          return cont(typeexpr);\n        }\n        if (value == "?")\n          return cont(typeexpr, expect(":"), typeexpr);\n      }\n      __name(afterType, "afterType");\n      function maybeTypeArgs(_, value) {\n        if (value == "<")\n          return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, afterType);\n      }\n      __name(maybeTypeArgs, "maybeTypeArgs");\n      function typeparam() {\n        return pass(typeexpr, maybeTypeDefault);\n      }\n      __name(typeparam, "typeparam");\n      function maybeTypeDefault(_, value) {\n        if (value == "=")\n          return cont(typeexpr);\n      }\n      __name(maybeTypeDefault, "maybeTypeDefault");\n      function vardef(_, value) {\n        if (value == "enum") {\n          cx.marked = "keyword";\n          return cont(enumdef);\n        }\n        return pass(pattern, maybetype, maybeAssign, vardefCont);\n      }\n      __name(vardef, "vardef");\n      function pattern(type2, value) {\n        if (isTS && isModifier(value)) {\n          cx.marked = "keyword";\n          return cont(pattern);\n        }\n        if (type2 == "variable") {\n          register(value);\n          return cont();\n        }\n        if (type2 == "spread")\n          return cont(pattern);\n        if (type2 == "[")\n          return contCommasep(eltpattern, "]");\n        if (type2 == "{")\n          return contCommasep(proppattern, "}");\n      }\n      __name(pattern, "pattern");\n      function proppattern(type2, value) {\n        if (type2 == "variable" && !cx.stream.match(/^\\s*:/, false)) {\n          register(value);\n          return cont(maybeAssign);\n        }\n        if (type2 == "variable")\n          cx.marked = "property";\n        if (type2 == "spread")\n          return cont(pattern);\n        if (type2 == "}")\n          return pass();\n        if (type2 == "[")\n          return cont(expression, expect("]"), expect(":"), proppattern);\n        return cont(expect(":"), pattern, maybeAssign);\n      }\n      __name(proppattern, "proppattern");\n      function eltpattern() {\n        return pass(pattern, maybeAssign);\n      }\n      __name(eltpattern, "eltpattern");\n      function maybeAssign(_type, value) {\n        if (value == "=")\n          return cont(expressionNoComma);\n      }\n      __name(maybeAssign, "maybeAssign");\n      function vardefCont(type2) {\n        if (type2 == ",")\n          return cont(vardef);\n      }\n      __name(vardefCont, "vardefCont");\n      function maybeelse(type2, value) {\n        if (type2 == "keyword b" && value == "else")\n          return cont(pushlex("form", "else"), statement, poplex);\n      }\n      __name(maybeelse, "maybeelse");\n      function forspec(type2, value) {\n        if (value == "await")\n          return cont(forspec);\n        if (type2 == "(")\n          return cont(pushlex(")"), forspec1, poplex);\n      }\n      __name(forspec, "forspec");\n      function forspec1(type2) {\n        if (type2 == "var")\n          return cont(vardef, forspec2);\n        if (type2 == "variable")\n          return cont(forspec2);\n        return pass(forspec2);\n      }\n      __name(forspec1, "forspec1");\n      function forspec2(type2, value) {\n        if (type2 == ")")\n          return cont();\n        if (type2 == ";")\n          return cont(forspec2);\n        if (value == "in" || value == "of") {\n          cx.marked = "keyword";\n          return cont(expression, forspec2);\n        }\n        return pass(expression, forspec2);\n      }\n      __name(forspec2, "forspec2");\n      function functiondef(type2, value) {\n        if (value == "*") {\n          cx.marked = "keyword";\n          return cont(functiondef);\n        }\n        if (type2 == "variable") {\n          register(value);\n          return cont(functiondef);\n        }\n        if (type2 == "(")\n          return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, mayberettype, statement, popcontext);\n        if (isTS && value == "<")\n          return cont(pushlex(">"), commasep(typeparam, ">"), poplex, functiondef);\n      }\n      __name(functiondef, "functiondef");\n      function functiondecl(type2, value) {\n        if (value == "*") {\n          cx.marked = "keyword";\n          return cont(functiondecl);\n        }\n        if (type2 == "variable") {\n          register(value);\n          return cont(functiondecl);\n        }\n        if (type2 == "(")\n          return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, mayberettype, popcontext);\n        if (isTS && value == "<")\n          return cont(pushlex(">"), commasep(typeparam, ">"), poplex, functiondecl);\n      }\n      __name(functiondecl, "functiondecl");\n      function typename(type2, value) {\n        if (type2 == "keyword" || type2 == "variable") {\n          cx.marked = "type";\n          return cont(typename);\n        } else if (value == "<") {\n          return cont(pushlex(">"), commasep(typeparam, ">"), poplex);\n        }\n      }\n      __name(typename, "typename");\n      function funarg(type2, value) {\n        if (value == "@")\n          cont(expression, funarg);\n        if (type2 == "spread")\n          return cont(funarg);\n        if (isTS && isModifier(value)) {\n          cx.marked = "keyword";\n          return cont(funarg);\n        }\n        if (isTS && type2 == "this")\n          return cont(maybetype, maybeAssign);\n        return pass(pattern, maybetype, maybeAssign);\n      }\n      __name(funarg, "funarg");\n      function classExpression(type2, value) {\n        if (type2 == "variable")\n          return className(type2, value);\n        return classNameAfter(type2, value);\n      }\n      __name(classExpression, "classExpression");\n      function className(type2, value) {\n        if (type2 == "variable") {\n          register(value);\n          return cont(classNameAfter);\n        }\n      }\n      __name(className, "className");\n      function classNameAfter(type2, value) {\n        if (value == "<")\n          return cont(pushlex(">"), commasep(typeparam, ">"), poplex, classNameAfter);\n        if (value == "extends" || value == "implements" || isTS && type2 == ",") {\n          if (value == "implements")\n            cx.marked = "keyword";\n          return cont(isTS ? typeexpr : expression, classNameAfter);\n        }\n        if (type2 == "{")\n          return cont(pushlex("}"), classBody, poplex);\n      }\n      __name(classNameAfter, "classNameAfter");\n      function classBody(type2, value) {\n        if (type2 == "async" || type2 == "variable" && (value == "static" || value == "get" || value == "set" || isTS && isModifier(value)) && cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false)) {\n          cx.marked = "keyword";\n          return cont(classBody);\n        }\n        if (type2 == "variable" || cx.style == "keyword") {\n          cx.marked = "property";\n          return cont(classfield, classBody);\n        }\n        if (type2 == "number" || type2 == "string")\n          return cont(classfield, classBody);\n        if (type2 == "[")\n          return cont(expression, maybetype, expect("]"), classfield, classBody);\n        if (value == "*") {\n          cx.marked = "keyword";\n          return cont(classBody);\n        }\n        if (isTS && type2 == "(")\n          return pass(functiondecl, classBody);\n        if (type2 == ";" || type2 == ",")\n          return cont(classBody);\n        if (type2 == "}")\n          return cont();\n        if (value == "@")\n          return cont(expression, classBody);\n      }\n      __name(classBody, "classBody");\n      function classfield(type2, value) {\n        if (value == "!")\n          return cont(classfield);\n        if (value == "?")\n          return cont(classfield);\n        if (type2 == ":")\n          return cont(typeexpr, maybeAssign);\n        if (value == "=")\n          return cont(expressionNoComma);\n        var context = cx.state.lexical.prev, isInterface = context && context.info == "interface";\n        return pass(isInterface ? functiondecl : functiondef);\n      }\n      __name(classfield, "classfield");\n      function afterExport(type2, value) {\n        if (value == "*") {\n          cx.marked = "keyword";\n          return cont(maybeFrom, expect(";"));\n        }\n        if (value == "default") {\n          cx.marked = "keyword";\n          return cont(expression, expect(";"));\n        }\n        if (type2 == "{")\n          return cont(commasep(exportField, "}"), maybeFrom, expect(";"));\n        return pass(statement);\n      }\n      __name(afterExport, "afterExport");\n      function exportField(type2, value) {\n        if (value == "as") {\n          cx.marked = "keyword";\n          return cont(expect("variable"));\n        }\n        if (type2 == "variable")\n          return pass(expressionNoComma, exportField);\n      }\n      __name(exportField, "exportField");\n      function afterImport(type2) {\n        if (type2 == "string")\n          return cont();\n        if (type2 == "(")\n          return pass(expression);\n        if (type2 == ".")\n          return pass(maybeoperatorComma);\n        return pass(importSpec, maybeMoreImports, maybeFrom);\n      }\n      __name(afterImport, "afterImport");\n      function importSpec(type2, value) {\n        if (type2 == "{")\n          return contCommasep(importSpec, "}");\n        if (type2 == "variable")\n          register(value);\n        if (value == "*")\n          cx.marked = "keyword";\n        return cont(maybeAs);\n      }\n      __name(importSpec, "importSpec");\n      function maybeMoreImports(type2) {\n        if (type2 == ",")\n          return cont(importSpec, maybeMoreImports);\n      }\n      __name(maybeMoreImports, "maybeMoreImports");\n      function maybeAs(_type, value) {\n        if (value == "as") {\n          cx.marked = "keyword";\n          return cont(importSpec);\n        }\n      }\n      __name(maybeAs, "maybeAs");\n      function maybeFrom(_type, value) {\n        if (value == "from") {\n          cx.marked = "keyword";\n          return cont(expression);\n        }\n      }\n      __name(maybeFrom, "maybeFrom");\n      function arrayLiteral(type2) {\n        if (type2 == "]")\n          return cont();\n        return pass(commasep(expressionNoComma, "]"));\n      }\n      __name(arrayLiteral, "arrayLiteral");\n      function enumdef() {\n        return pass(pushlex("form"), pattern, expect("{"), pushlex("}"), commasep(enummember, "}"), poplex, poplex);\n      }\n      __name(enumdef, "enumdef");\n      function enummember() {\n        return pass(pattern, maybeAssign);\n      }\n      __name(enummember, "enummember");\n      function isContinuedStatement(state, textAfter) {\n        return state.lastType == "operator" || state.lastType == "," || isOperatorChar.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));\n      }\n      __name(isContinuedStatement, "isContinuedStatement");\n      function expressionAllowed(stream, state, backUp) {\n        return state.tokenize == tokenBase && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) || state.lastType == "quasi" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));\n      }\n      __name(expressionAllowed, "expressionAllowed");\n      return {\n        startState: function(basecolumn) {\n          var state = {\n            tokenize: tokenBase,\n            lastType: "sof",\n            cc: [],\n            lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, "block", false),\n            localVars: parserConfig.localVars,\n            context: parserConfig.localVars && new Context(null, null, false),\n            indented: basecolumn || 0\n          };\n          if (parserConfig.globalVars && typeof parserConfig.globalVars == "object")\n            state.globalVars = parserConfig.globalVars;\n          return state;\n        },\n        token: function(stream, state) {\n          if (stream.sol()) {\n            if (!state.lexical.hasOwnProperty("align"))\n              state.lexical.align = false;\n            state.indented = stream.indentation();\n            findFatArrow(stream, state);\n          }\n          if (state.tokenize != tokenComment && stream.eatSpace())\n            return null;\n          var style = state.tokenize(stream, state);\n          if (type == "comment")\n            return style;\n          state.lastType = type == "operator" && (content == "++" || content == "--") ? "incdec" : type;\n          return parseJS(state, style, type, content, stream);\n        },\n        indent: function(state, textAfter) {\n          if (state.tokenize == tokenComment || state.tokenize == tokenQuasi)\n            return CodeMirror.Pass;\n          if (state.tokenize != tokenBase)\n            return 0;\n          var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top;\n          if (!/^\\s*else\\b/.test(textAfter))\n            for (var i = state.cc.length - 1; i >= 0; --i) {\n              var c = state.cc[i];\n              if (c == poplex)\n                lexical = lexical.prev;\n              else if (c != maybeelse && c != popcontext)\n                break;\n            }\n          while ((lexical.type == "stat" || lexical.type == "form") && (firstChar == "}" || (top = state.cc[state.cc.length - 1]) && (top == maybeoperatorComma || top == maybeoperatorNoComma) && !/^[,\\.=+\\-*:?[\\(]/.test(textAfter)))\n            lexical = lexical.prev;\n          if (statementIndent && lexical.type == ")" && lexical.prev.type == "stat")\n            lexical = lexical.prev;\n          var type2 = lexical.type, closing = firstChar == type2;\n          if (type2 == "vardef")\n            return lexical.indented + (state.lastType == "operator" || state.lastType == "," ? lexical.info.length + 1 : 0);\n          else if (type2 == "form" && firstChar == "{")\n            return lexical.indented;\n          else if (type2 == "form")\n            return lexical.indented + indentUnit;\n          else if (type2 == "stat")\n            return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n          else if (lexical.info == "switch" && !closing && parserConfig.doubleIndentSwitch != false)\n            return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n          else if (lexical.align)\n            return lexical.column + (closing ? 0 : 1);\n          else\n            return lexical.indented + (closing ? 0 : indentUnit);\n        },\n        electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n        blockCommentStart: jsonMode ? null : "/*",\n        blockCommentEnd: jsonMode ? null : "*/",\n        blockCommentContinue: jsonMode ? null : " * ",\n        lineComment: jsonMode ? null : "//",\n        fold: "brace",\n        closeBrackets: "()[]{}\'\'\\"\\"``",\n        helperType: jsonMode ? "json" : "javascript",\n        jsonldMode,\n        jsonMode,\n        expressionAllowed,\n        skipExpression: function(state) {\n          parseJS(state, "atom", "atom", "true", new CodeMirror.StringStream("", 2, null));\n        }\n      };\n    });\n    CodeMirror.registerHelper("wordChars", "javascript", /[\\w$]/);\n    CodeMirror.defineMIME("text/javascript", "javascript");\n    CodeMirror.defineMIME("text/ecmascript", "javascript");\n    CodeMirror.defineMIME("application/javascript", "javascript");\n    CodeMirror.defineMIME("application/x-javascript", "javascript");\n    CodeMirror.defineMIME("application/ecmascript", "javascript");\n    CodeMirror.defineMIME("application/json", { name: "javascript", json: true });\n    CodeMirror.defineMIME("application/x-json", { name: "javascript", json: true });\n    CodeMirror.defineMIME("application/manifest+json", { name: "javascript", json: true });\n    CodeMirror.defineMIME("application/ld+json", { name: "javascript", jsonld: true });\n    CodeMirror.defineMIME("text/typescript", { name: "javascript", typescript: true });\n    CodeMirror.defineMIME("application/typescript", { name: "javascript", typescript: true });\n  });\n})();\nvar javascript = javascript$2.exports;\nvar javascript$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: "Module",\n  "default": javascript\n}, [javascript$2.exports]));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///89863\n')}}]);