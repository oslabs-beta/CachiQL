"use strict";(self.webpackChunkcachiql_demo=self.webpackChunkcachiql_demo||[]).push([[896],{86896:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97480);\n/* harmony import */ var _index_es_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59361);\n/* harmony import */ var _onlineParser_es_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(98007);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(67294);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(73935);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\n\n\n\n\n\n_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.C.defineMode("graphql-results", (config) => {\n  const parser = (0,_onlineParser_es_js__WEBPACK_IMPORTED_MODULE_2__.o)({\n    eatWhitespace: (stream) => stream.eatSpace(),\n    lexRules: LexRules,\n    parseRules: ParseRules,\n    editorConfig: { tabSize: config.tabSize }\n  });\n  return {\n    config,\n    startState: parser.startState,\n    token: parser.token,\n    indent,\n    electricInput: /^\\s*[}\\]]/,\n    fold: "brace",\n    closeBrackets: {\n      pairs: \'[]{}""\',\n      explode: "[]{}"\n    }\n  };\n});\nfunction indent(state, textAfter) {\n  var _a, _b;\n  const levels = state.levels;\n  const level = !levels || levels.length === 0 ? state.indentLevel : levels[levels.length - 1] - (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n  return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\n__name(indent, "indent");\nconst LexRules = {\n  Punctuation: /^\\[|]|\\{|\\}|:|,/,\n  Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n  String: /^"(?:[^"\\\\]|\\\\(?:"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*"?/,\n  Keyword: /^true|false|null/\n};\nconst ParseRules = {\n  Document: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)("{"), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.l)("Entry", (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)(",")), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)("}")],\n  Entry: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.t)("String", "def"), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)(":"), "Value"],\n  Value(token) {\n    switch (token.kind) {\n      case "Number":\n        return "NumberValue";\n      case "String":\n        return "StringValue";\n      case "Punctuation":\n        switch (token.value) {\n          case "[":\n            return "ListValue";\n          case "{":\n            return "ObjectValue";\n        }\n        return null;\n      case "Keyword":\n        switch (token.value) {\n          case "true":\n          case "false":\n            return "BooleanValue";\n          case "null":\n            return "NullValue";\n        }\n        return null;\n    }\n  },\n  NumberValue: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.t)("Number", "number")],\n  StringValue: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.t)("String", "string")],\n  BooleanValue: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.t)("Keyword", "builtin")],\n  NullValue: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.t)("Keyword", "keyword")],\n  ListValue: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)("["), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.l)("Value", (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)(",")), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)("]")],\n  ObjectValue: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)("{"), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.l)("ObjectField", (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)(",")), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)("}")],\n  ObjectField: [(0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.t)("String", "property"), (0,_index_es_js__WEBPACK_IMPORTED_MODULE_1__.p)(":"), "Value"]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODY4OTYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQSw0REFBNEQsMkJBQTJCO0FBQ2xDO0FBQ3BDO0FBQytCO0FBQ1M7QUFDMUM7QUFDSTtBQUNuQiwyREFBcUI7QUFDckIsaUJBQWlCLHNEQUFZO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsR0FBRztBQUMzQjtBQUNBLDJEQUEyRCxFQUFFO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLGFBQWEsK0NBQUMsR0FBRyxJQUFJLCtDQUFJLFVBQVUsK0NBQUMsUUFBUSwrQ0FBQyxHQUFHO0FBQ2hELFVBQVUsK0NBQUMsbUJBQW1CLCtDQUFDO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGdCQUFnQiwrQ0FBQztBQUNqQixnQkFBZ0IsK0NBQUM7QUFDakIsaUJBQWlCLCtDQUFDO0FBQ2xCLGNBQWMsK0NBQUM7QUFDZixjQUFjLCtDQUFDLE9BQU8sK0NBQUksVUFBVSwrQ0FBQyxRQUFRLCtDQUFDO0FBQzlDLGdCQUFnQiwrQ0FBQyxHQUFHLElBQUksK0NBQUksZ0JBQWdCLCtDQUFDLFFBQVEsK0NBQUMsR0FBRztBQUN6RCxnQkFBZ0IsK0NBQUMsd0JBQXdCLCtDQUFDO0FBQzFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FjaGlxbC1kZW1vLy4vbm9kZV9tb2R1bGVzL0BncmFwaGlxbC9yZWFjdC9kaXN0L21vZGUuZXMyLmpzPzU3NDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX25hbWUgPSAodGFyZ2V0LCB2YWx1ZSkgPT4gX19kZWZQcm9wKHRhcmdldCwgXCJuYW1lXCIsIHsgdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbmltcG9ydCB7IEMgYXMgQ29kZU1pcnJvciB9IGZyb20gXCIuL2NvZGVtaXJyb3IuZXMuanNcIjtcbmltcG9ydCBcImdyYXBocWxcIjtcbmltcG9ydCB7IHAsIGwgYXMgbGlzdCwgdCB9IGZyb20gXCIuL2luZGV4LmVzLmpzXCI7XG5pbXBvcnQgeyBvIGFzIG9ubGluZVBhcnNlciB9IGZyb20gXCIuL29ubGluZVBhcnNlci5lcy5qc1wiO1xuaW1wb3J0IFwicmVhY3RcIjtcbmltcG9ydCBcInJlYWN0LWRvbVwiO1xuQ29kZU1pcnJvci5kZWZpbmVNb2RlKFwiZ3JhcGhxbC1yZXN1bHRzXCIsIChjb25maWcpID0+IHtcbiAgY29uc3QgcGFyc2VyID0gb25saW5lUGFyc2VyKHtcbiAgICBlYXRXaGl0ZXNwYWNlOiAoc3RyZWFtKSA9PiBzdHJlYW0uZWF0U3BhY2UoKSxcbiAgICBsZXhSdWxlczogTGV4UnVsZXMsXG4gICAgcGFyc2VSdWxlczogUGFyc2VSdWxlcyxcbiAgICBlZGl0b3JDb25maWc6IHsgdGFiU2l6ZTogY29uZmlnLnRhYlNpemUgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBjb25maWcsXG4gICAgc3RhcnRTdGF0ZTogcGFyc2VyLnN0YXJ0U3RhdGUsXG4gICAgdG9rZW46IHBhcnNlci50b2tlbixcbiAgICBpbmRlbnQsXG4gICAgZWxlY3RyaWNJbnB1dDogL15cXHMqW31cXF1dLyxcbiAgICBmb2xkOiBcImJyYWNlXCIsXG4gICAgY2xvc2VCcmFja2V0czoge1xuICAgICAgcGFpcnM6ICdbXXt9XCJcIicsXG4gICAgICBleHBsb2RlOiBcIltde31cIlxuICAgIH1cbiAgfTtcbn0pO1xuZnVuY3Rpb24gaW5kZW50KHN0YXRlLCB0ZXh0QWZ0ZXIpIHtcbiAgdmFyIF9hLCBfYjtcbiAgY29uc3QgbGV2ZWxzID0gc3RhdGUubGV2ZWxzO1xuICBjb25zdCBsZXZlbCA9ICFsZXZlbHMgfHwgbGV2ZWxzLmxlbmd0aCA9PT0gMCA/IHN0YXRlLmluZGVudExldmVsIDogbGV2ZWxzW2xldmVscy5sZW5ndGggLSAxXSAtICgoKF9hID0gdGhpcy5lbGVjdHJpY0lucHV0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudGVzdCh0ZXh0QWZ0ZXIpKSA/IDEgOiAwKTtcbiAgcmV0dXJuIChsZXZlbCB8fCAwKSAqICgoKF9iID0gdGhpcy5jb25maWcpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pbmRlbnRVbml0KSB8fCAwKTtcbn1cbl9fbmFtZShpbmRlbnQsIFwiaW5kZW50XCIpO1xuY29uc3QgTGV4UnVsZXMgPSB7XG4gIFB1bmN0dWF0aW9uOiAvXlxcW3xdfFxce3xcXH18OnwsLyxcbiAgTnVtYmVyOiAvXi0/KD86MHwoPzpbMS05XVswLTldKikpKD86XFwuWzAtOV0qKT8oPzpbZUVdWystXT9bMC05XSspPy8sXG4gIFN0cmluZzogL15cIig/OlteXCJcXFxcXXxcXFxcKD86XCJ8XFwvfFxcXFx8YnxmfG58cnx0fHVbMC05YS1mQS1GXXs0fSkpKlwiPy8sXG4gIEtleXdvcmQ6IC9edHJ1ZXxmYWxzZXxudWxsL1xufTtcbmNvbnN0IFBhcnNlUnVsZXMgPSB7XG4gIERvY3VtZW50OiBbcChcIntcIiksIGxpc3QoXCJFbnRyeVwiLCBwKFwiLFwiKSksIHAoXCJ9XCIpXSxcbiAgRW50cnk6IFt0KFwiU3RyaW5nXCIsIFwiZGVmXCIpLCBwKFwiOlwiKSwgXCJWYWx1ZVwiXSxcbiAgVmFsdWUodG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLmtpbmQpIHtcbiAgICAgIGNhc2UgXCJOdW1iZXJcIjpcbiAgICAgICAgcmV0dXJuIFwiTnVtYmVyVmFsdWVcIjtcbiAgICAgIGNhc2UgXCJTdHJpbmdcIjpcbiAgICAgICAgcmV0dXJuIFwiU3RyaW5nVmFsdWVcIjtcbiAgICAgIGNhc2UgXCJQdW5jdHVhdGlvblwiOlxuICAgICAgICBzd2l0Y2ggKHRva2VuLnZhbHVlKSB7XG4gICAgICAgICAgY2FzZSBcIltcIjpcbiAgICAgICAgICAgIHJldHVybiBcIkxpc3RWYWx1ZVwiO1xuICAgICAgICAgIGNhc2UgXCJ7XCI6XG4gICAgICAgICAgICByZXR1cm4gXCJPYmplY3RWYWx1ZVwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgY2FzZSBcIktleXdvcmRcIjpcbiAgICAgICAgc3dpdGNoICh0b2tlbi52YWx1ZSkge1xuICAgICAgICAgIGNhc2UgXCJ0cnVlXCI6XG4gICAgICAgICAgY2FzZSBcImZhbHNlXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJCb29sZWFuVmFsdWVcIjtcbiAgICAgICAgICBjYXNlIFwibnVsbFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiTnVsbFZhbHVlXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9LFxuICBOdW1iZXJWYWx1ZTogW3QoXCJOdW1iZXJcIiwgXCJudW1iZXJcIildLFxuICBTdHJpbmdWYWx1ZTogW3QoXCJTdHJpbmdcIiwgXCJzdHJpbmdcIildLFxuICBCb29sZWFuVmFsdWU6IFt0KFwiS2V5d29yZFwiLCBcImJ1aWx0aW5cIildLFxuICBOdWxsVmFsdWU6IFt0KFwiS2V5d29yZFwiLCBcImtleXdvcmRcIildLFxuICBMaXN0VmFsdWU6IFtwKFwiW1wiKSwgbGlzdChcIlZhbHVlXCIsIHAoXCIsXCIpKSwgcChcIl1cIildLFxuICBPYmplY3RWYWx1ZTogW3AoXCJ7XCIpLCBsaXN0KFwiT2JqZWN0RmllbGRcIiwgcChcIixcIikpLCBwKFwifVwiKV0sXG4gIE9iamVjdEZpZWxkOiBbdChcIlN0cmluZ1wiLCBcInByb3BlcnR5XCIpLCBwKFwiOlwiKSwgXCJWYWx1ZVwiXVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///86896\n')},98007:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "o": () => (/* binding */ onlineParser)\n/* harmony export */ });\n/* harmony import */ var _index_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59361);\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(97359);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\n\nfunction onlineParser(options = {\n  eatWhitespace: (stream) => stream.eatWhile(_index_es_js__WEBPACK_IMPORTED_MODULE_0__.i),\n  lexRules: _index_es_js__WEBPACK_IMPORTED_MODULE_0__.L,\n  parseRules: _index_es_js__WEBPACK_IMPORTED_MODULE_0__.P,\n  editorConfig: {}\n}) {\n  return {\n    startState() {\n      const initialState = {\n        level: 0,\n        step: 0,\n        name: null,\n        kind: null,\n        type: null,\n        rule: null,\n        needsSeparator: false,\n        prevState: null\n      };\n      pushRule(options.parseRules, initialState, graphql__WEBPACK_IMPORTED_MODULE_1__/* .Kind.DOCUMENT */ .h.DOCUMENT);\n      return initialState;\n    },\n    token(stream, state) {\n      return getToken(stream, state, options);\n    }\n  };\n}\n__name(onlineParser, "onlineParser");\nfunction getToken(stream, state, options) {\n  var _a;\n  if (state.inBlockstring) {\n    if (stream.match(/.*"""/)) {\n      state.inBlockstring = false;\n      return "string";\n    } else {\n      stream.skipToEnd();\n      return "string";\n    }\n  }\n  const { lexRules, parseRules, eatWhitespace, editorConfig } = options;\n  if (state.rule && state.rule.length === 0) {\n    popRule(state);\n  } else if (state.needsAdvance) {\n    state.needsAdvance = false;\n    advanceRule(state, true);\n  }\n  if (stream.sol()) {\n    const tabSize = (editorConfig === null || editorConfig === void 0 ? void 0 : editorConfig.tabSize) || 2;\n    state.indentLevel = Math.floor(stream.indentation() / tabSize);\n  }\n  if (eatWhitespace(stream)) {\n    return "ws";\n  }\n  const token = lex(lexRules, stream);\n  if (!token) {\n    const matchedSomething = stream.match(/\\S+/);\n    if (!matchedSomething) {\n      stream.match(/\\s/);\n    }\n    pushRule(SpecialParseRules, state, "Invalid");\n    return "invalidchar";\n  }\n  if (token.kind === "Comment") {\n    pushRule(SpecialParseRules, state, "Comment");\n    return "comment";\n  }\n  const backupState = assign({}, state);\n  if (token.kind === "Punctuation") {\n    if (/^[{([]/.test(token.value)) {\n      if (state.indentLevel !== void 0) {\n        state.levels = (state.levels || []).concat(state.indentLevel + 1);\n      }\n    } else if (/^[})\\]]/.test(token.value)) {\n      const levels = state.levels = (state.levels || []).slice(0, -1);\n      if (state.indentLevel) {\n        if (levels.length > 0 && levels[levels.length - 1] < state.indentLevel) {\n          state.indentLevel = levels[levels.length - 1];\n        }\n      }\n    }\n  }\n  while (state.rule) {\n    let expected = typeof state.rule === "function" ? state.step === 0 ? state.rule(token, stream) : null : state.rule[state.step];\n    if (state.needsSeparator) {\n      expected = expected === null || expected === void 0 ? void 0 : expected.separator;\n    }\n    if (expected) {\n      if (expected.ofRule) {\n        expected = expected.ofRule;\n      }\n      if (typeof expected === "string") {\n        pushRule(parseRules, state, expected);\n        continue;\n      }\n      if ((_a = expected.match) === null || _a === void 0 ? void 0 : _a.call(expected, token)) {\n        if (expected.update) {\n          expected.update(state, token);\n        }\n        if (token.kind === "Punctuation") {\n          advanceRule(state, true);\n        } else {\n          state.needsAdvance = true;\n        }\n        return expected.style;\n      }\n    }\n    unsuccessful(state);\n  }\n  assign(state, backupState);\n  pushRule(SpecialParseRules, state, "Invalid");\n  return "invalidchar";\n}\n__name(getToken, "getToken");\nfunction assign(to, from) {\n  const keys = Object.keys(from);\n  for (let i = 0; i < keys.length; i++) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n__name(assign, "assign");\nconst SpecialParseRules = {\n  Invalid: [],\n  Comment: []\n};\nfunction pushRule(rules, state, ruleKind) {\n  if (!rules[ruleKind]) {\n    throw new TypeError("Unknown rule: " + ruleKind);\n  }\n  state.prevState = Object.assign({}, state);\n  state.kind = ruleKind;\n  state.name = null;\n  state.type = null;\n  state.rule = rules[ruleKind];\n  state.step = 0;\n  state.needsSeparator = false;\n}\n__name(pushRule, "pushRule");\nfunction popRule(state) {\n  if (!state.prevState) {\n    return;\n  }\n  state.kind = state.prevState.kind;\n  state.name = state.prevState.name;\n  state.type = state.prevState.type;\n  state.rule = state.prevState.rule;\n  state.step = state.prevState.step;\n  state.needsSeparator = state.prevState.needsSeparator;\n  state.prevState = state.prevState.prevState;\n}\n__name(popRule, "popRule");\nfunction advanceRule(state, successful) {\n  var _a;\n  if (isList(state) && state.rule) {\n    const step = state.rule[state.step];\n    if (step.separator) {\n      const separator = step.separator;\n      state.needsSeparator = !state.needsSeparator;\n      if (!state.needsSeparator && separator.ofRule) {\n        return;\n      }\n    }\n    if (successful) {\n      return;\n    }\n  }\n  state.needsSeparator = false;\n  state.step++;\n  while (state.rule && !(Array.isArray(state.rule) && state.step < state.rule.length)) {\n    popRule(state);\n    if (state.rule) {\n      if (isList(state)) {\n        if ((_a = state.rule) === null || _a === void 0 ? void 0 : _a[state.step].separator) {\n          state.needsSeparator = !state.needsSeparator;\n        }\n      } else {\n        state.needsSeparator = false;\n        state.step++;\n      }\n    }\n  }\n}\n__name(advanceRule, "advanceRule");\nfunction isList(state) {\n  const step = Array.isArray(state.rule) && typeof state.rule[state.step] !== "string" && state.rule[state.step];\n  return step && step.isList;\n}\n__name(isList, "isList");\nfunction unsuccessful(state) {\n  while (state.rule && !(Array.isArray(state.rule) && state.rule[state.step].ofRule)) {\n    popRule(state);\n  }\n  if (state.rule) {\n    advanceRule(state, false);\n  }\n}\n__name(unsuccessful, "unsuccessful");\nfunction lex(lexRules, stream) {\n  const kinds = Object.keys(lexRules);\n  for (let i = 0; i < kinds.length; i++) {\n    const match = stream.match(lexRules[kinds[i]]);\n    if (match && match instanceof Array) {\n      return { kind: kinds[i], value: match[0] };\n    }\n  }\n}\n__name(lex, "lex");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///98007\n')}}]);