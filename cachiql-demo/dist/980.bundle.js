"use strict";(self.webpackChunkcachiql_demo=self.webpackChunkcachiql_demo||[]).push([[980],{54980:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "a": () => (/* binding */ matchbrackets$2),\n/* harmony export */   "m": () => (/* binding */ matchbrackets$1)\n/* harmony export */ });\n/* harmony import */ var _codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(97480);\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\n\nfunction _mergeNamespaces(n, m) {\n  m.forEach(function(e) {\n    e && typeof e !== "string" && !Array.isArray(e) && Object.keys(e).forEach(function(k) {\n      if (k !== "default" && !(k in n)) {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function() {\n            return e[k];\n          }\n        });\n      }\n    });\n  });\n  return Object.freeze(n);\n}\n__name(_mergeNamespaces, "_mergeNamespaces");\nvar matchbrackets$2 = { exports: {} };\n(function(module, exports) {\n  (function(mod) {\n    mod(_codemirror_es_js__WEBPACK_IMPORTED_MODULE_0__.a.exports);\n  })(function(CodeMirror) {\n    var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) && (document.documentMode == null || document.documentMode < 8);\n    var Pos = CodeMirror.Pos;\n    var matching = { "(": ")>", ")": "(<", "[": "]>", "]": "[<", "{": "}>", "}": "{<", "<": ">>", ">": "<<" };\n    function bracketRegex(config) {\n      return config && config.bracketRegex || /[(){}[\\]]/;\n    }\n    __name(bracketRegex, "bracketRegex");\n    function findMatchingBracket(cm, where, config) {\n      var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n      var afterCursor = config && config.afterCursor;\n      if (afterCursor == null)\n        afterCursor = /(^| )cm-fat-cursor($| )/.test(cm.getWrapperElement().className);\n      var re = bracketRegex(config);\n      var match = !afterCursor && pos >= 0 && re.test(line.text.charAt(pos)) && matching[line.text.charAt(pos)] || re.test(line.text.charAt(pos + 1)) && matching[line.text.charAt(++pos)];\n      if (!match)\n        return null;\n      var dir = match.charAt(1) == ">" ? 1 : -1;\n      if (config && config.strict && dir > 0 != (pos == where.ch))\n        return null;\n      var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n      var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style, config);\n      if (found == null)\n        return null;\n      return {\n        from: Pos(where.line, pos),\n        to: found && found.pos,\n        match: found && found.ch == match.charAt(0),\n        forward: dir > 0\n      };\n    }\n    __name(findMatchingBracket, "findMatchingBracket");\n    function scanForBracket(cm, where, dir, style, config) {\n      var maxScanLen = config && config.maxScanLineLength || 1e4;\n      var maxScanLines = config && config.maxScanLines || 1e3;\n      var stack = [];\n      var re = bracketRegex(config);\n      var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1) : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n      for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n        var line = cm.getLine(lineNo);\n        if (!line)\n          continue;\n        var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n        if (line.length > maxScanLen)\n          continue;\n        if (lineNo == where.line)\n          pos = where.ch - (dir < 0 ? 1 : 0);\n        for (; pos != end; pos += dir) {\n          var ch = line.charAt(pos);\n          if (re.test(ch) && (style === void 0 || (cm.getTokenTypeAt(Pos(lineNo, pos + 1)) || "") == (style || ""))) {\n            var match = matching[ch];\n            if (match && match.charAt(1) == ">" == dir > 0)\n              stack.push(ch);\n            else if (!stack.length)\n              return { pos: Pos(lineNo, pos), ch };\n            else\n              stack.pop();\n          }\n        }\n      }\n      return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n    }\n    __name(scanForBracket, "scanForBracket");\n    function matchBrackets(cm, autoclear, config) {\n      var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1e3, highlightNonMatching = config && config.highlightNonMatching;\n      var marks = [], ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, config);\n        if (match && (match.match || highlightNonMatching !== false) && cm.getLine(match.from.line).length <= maxHighlightLen) {\n          var style = match.match ? "CodeMirror-matchingbracket" : "CodeMirror-nonmatchingbracket";\n          marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), { className: style }));\n          if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n            marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), { className: style }));\n        }\n      }\n      if (marks.length) {\n        if (ie_lt8 && cm.state.focused)\n          cm.focus();\n        var clear = /* @__PURE__ */ __name(function() {\n          cm.operation(function() {\n            for (var i2 = 0; i2 < marks.length; i2++)\n              marks[i2].clear();\n          });\n        }, "clear");\n        if (autoclear)\n          setTimeout(clear, 800);\n        else\n          return clear;\n      }\n    }\n    __name(matchBrackets, "matchBrackets");\n    function doMatchBrackets(cm) {\n      cm.operation(function() {\n        if (cm.state.matchBrackets.currentlyHighlighted) {\n          cm.state.matchBrackets.currentlyHighlighted();\n          cm.state.matchBrackets.currentlyHighlighted = null;\n        }\n        cm.state.matchBrackets.currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n      });\n    }\n    __name(doMatchBrackets, "doMatchBrackets");\n    function clearHighlighted(cm) {\n      if (cm.state.matchBrackets && cm.state.matchBrackets.currentlyHighlighted) {\n        cm.state.matchBrackets.currentlyHighlighted();\n        cm.state.matchBrackets.currentlyHighlighted = null;\n      }\n    }\n    __name(clearHighlighted, "clearHighlighted");\n    CodeMirror.defineOption("matchBrackets", false, function(cm, val, old) {\n      if (old && old != CodeMirror.Init) {\n        cm.off("cursorActivity", doMatchBrackets);\n        cm.off("focus", doMatchBrackets);\n        cm.off("blur", clearHighlighted);\n        clearHighlighted(cm);\n      }\n      if (val) {\n        cm.state.matchBrackets = typeof val == "object" ? val : {};\n        cm.on("cursorActivity", doMatchBrackets);\n        cm.on("focus", doMatchBrackets);\n        cm.on("blur", clearHighlighted);\n      }\n    });\n    CodeMirror.defineExtension("matchBrackets", function() {\n      matchBrackets(this, true);\n    });\n    CodeMirror.defineExtension("findMatchingBracket", function(pos, config, oldConfig) {\n      if (oldConfig || typeof config == "boolean") {\n        if (!oldConfig) {\n          config = config ? { strict: true } : null;\n        } else {\n          oldConfig.strict = config;\n          config = oldConfig;\n        }\n      }\n      return findMatchingBracket(this, pos, config);\n    });\n    CodeMirror.defineExtension("scanForBracket", function(pos, dir, style, config) {\n      return scanForBracket(this, pos, dir, style, config);\n    });\n  });\n})();\nvar matchbrackets = matchbrackets$2.exports;\nvar matchbrackets$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ _mergeNamespaces({\n  __proto__: null,\n  [Symbol.toStringTag]: "Module",\n  "default": matchbrackets\n}, [matchbrackets$2.exports]));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///54980\n')}}]);